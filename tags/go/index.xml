<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on 顾惜朝 的博客</title><link>https://blog.iofree.xyz/tags/go/</link><description>Recent content in Go on 顾惜朝 的博客</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 May 2021 11:22:38 +0800</lastBuildDate><atom:link href="https://blog.iofree.xyz/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go mod 小结</title><link>https://blog.iofree.xyz/posts/go/gomod/</link><pubDate>Wed, 12 May 2021 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/go/gomod/</guid><description>&amp;lt;h2 id=&amp;#34;gomod-文件&amp;#34;&amp;gt;go.mod 文件&amp;lt;/h2&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;module example.com/foobar
go 1.13
require (
example.com/apple v0.1.2
example.com/banana v1.2.3
example.com/banana/v2 v2.3.4
example.com/pineapple v0.0.0-20190924185754-1b0db40df49a
)
exclude example.com/banana v1.2.4
replace example.com/apple v0.1.2 =&amp;amp;gt; example.com/rda v0.1.0
replace example.com/banana =&amp;amp;gt; example.com/hugebanana
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;module：用于定义当前项目的模块路径。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;go：用于设置预期的 Go 版本。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;require：用于设置一个特定的模块版本。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;exclude：用于从使用中排除一个特定的模块版本。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;replace：用于将一个模块版本替换为另外一个模块版本。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3 id=&amp;#34;版本表示方式&amp;#34;&amp;gt;版本表示方式&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;基于某一个commit的伪版本号&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;基本版本前缀-commit的UTC时间-commit的hash前12位
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;vX.0.0-yyyymmddhhmmss-abcdefabcdef&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;vX.Y.Z-pre.0.yyyymmddhhmmss-abcdefabcdef&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;vX.Y.(Z+1)-0.yyyymmddhhmmss-abcdefabcdef&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;需要注意的是，同一个仓库的 v2.x.x 和之前小于 v2 大版本的代码被认为是两个不同的仓库。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;**Go modules 规定主版本号不是 v0 或者 v1 时，那么主版本号必须显式地出现在模块路径的尾部。**例如，上面示例 go.mod 文件中的 ：&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt; example.com/banana v1.2.3
example.com/banana/v2 v2.3.4
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;h2 id=&amp;#34;go-mod-版本选择算法&amp;#34;&amp;gt;Go mod 版本选择算法&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;在go mod中，项目依赖了A、B两个项目，且A、B分别依赖了C项目的v1.3、v1.3两个版本。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;最终会选择最高的那个版本 v1.4.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://cdn.jsdelivr.net/gh/Allenxuxu/blog/img/%28null%29&amp;#34; alt=&amp;#34;img&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;对每个依赖项，选择其所有被依赖版本中最高的那个版本。&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;go-mod-的使用方法和工具&amp;#34;&amp;gt;Go mod 的使用方法和工具&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;用 go get 拉取新的依赖&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;拉取最新的版本(优先择取 tag)：go get golang.org/x/text@latest&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;拉取 master 分支的最新 commit：go get golang.org/x/text@master&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;拉取 tag 为 v0.3.2 的 commit：go get &amp;lt;a href=&amp;#34;mailto:golang.org/x/text@v0.3.2&amp;#34;&amp;gt;golang.org/x/text@v0.3.2&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;拉取 hash 为 342b231 的 commit，最终会被转换为 v0.3.2：go get golang.org/x/text@342b2e&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;用 go get -u 更新现有的依赖&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;用 go mod download 下载 go.mod 文件中指明的所有依赖&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;用 go mod tidy 整理现有的依赖&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;用 go mod graph 查看现有的依赖结构&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;用 go mod init 生成 go.mod 文件&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;用 go mod edit 编辑 go.mod 文件&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;用 go mod vendor 导出现有的所有依赖 (事实上 Go modules 正在淡化 Vendor 的概念)&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;用 go mod verify 校验一个模块是否被篡改过&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;go-mod-的常见问题&amp;#34;&amp;gt;Go mod 的常见问题&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;主版本号
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Go get -u 不会更新主版本号，如果需要更新，需要手动修改其导入路径
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Go modules 规定主版本号不是 v0 或者 v1 时，那么主版本号必须显式地出现在模块路径的尾部。&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;</description></item><item><title>Go1.16 embed 和 Vue</title><link>https://blog.iofree.xyz/posts/practice/gin-vue/</link><pubDate>Tue, 20 Apr 2021 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/practice/gin-vue/</guid><description>&amp;lt;h2 id=&amp;#34;vue&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;vue&amp;lt;/strong&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;相关代码： &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/ginvue&amp;#34;&amp;gt;https://github.com/Allenxuxu/ginvue&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;先全局安装下 vue cli 并创建一个 demo 项目&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;npm install -g @vue/cli
vue create web
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;然后我们进入 web 目录，修改生成的 package.json 文件调整一下 build 生成的静态文件目录。&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;amp;ndash;dest 是指定输出的目录&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;**&amp;amp;ndash;no-clean 是让他不要每次覆盖我们的目录，因为后面我们会放一个 go 文件到那个目录。 **&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;quot;build&amp;amp;quot;: &amp;amp;quot;vue-cli-service build --no-clean --dest ../static&amp;amp;quot;,
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;再新增一个 vue.config.js 文件来修改下 , 这里将 production 的 publicPath 修改成带一个前缀 &amp;lt;strong&amp;gt;&amp;lt;code&amp;gt;/ui/&amp;lt;/code&amp;gt;&amp;lt;/strong&amp;gt; , 这里主要就是为了后面我们的go 代码路由设置方便，所有的前端静态文件请求都带上 /ui 前缀，和后端 API 接口带 /api 前缀区分。&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;module.exports = {
publicPath: process.env.NODE_ENV === &amp;#39;production&amp;#39;
? &amp;#39;/ui/&amp;#39;
: &amp;#39;/&amp;#39;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;最后我们再 web 目录运行 &amp;lt;strong&amp;gt;&amp;lt;code&amp;gt;npm run build&amp;lt;/code&amp;gt;&amp;lt;/strong&amp;gt;，会生成一个 static 目录（也就是我们修改的 package.json 里指定的目录），里面会存放生成的静态文件。&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;.
├── css
│ └── app.fb0c6e1c.css
├── favicon.ico
├── img
│ └── logo.82b9c7a5.png
├── index.html
├── js
│ ├── app.cdde1042.js
│ ├── app.cdde1042.js.map
│ ├── app.e656f618.js
│ ├── app.e656f618.js.map
│ ├── chunk-vendors.ff672a17.js
│ └── chunk-vendors.ff672a17.js.map
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;h2 id=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;go&amp;lt;/strong&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;我们再 static 目录里增加一个 go 文件，这里使用 1.16 的 embed 来嵌入当前目录的静态文件：&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;package static
import &amp;amp;quot;embed&amp;amp;quot;
//go:embed index.html favicon.ico css img js
var Static embed.FS
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;最后看一下 main.go，主要就是这行 &amp;lt;strong&amp;gt;&amp;lt;code&amp;gt;r.StaticFS(&amp;amp;quot;/ui&amp;amp;quot;, http.FS(static.Static))&amp;lt;/code&amp;gt;&amp;lt;/strong&amp;gt;.&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;net/http&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;time&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/Allenxuxu/ginvue/static&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/gin-gonic/gin&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/pkg/browser&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gin&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Default&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;StaticFS&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;/ui&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;http&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;FS&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;static&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Static&amp;lt;/span&amp;gt;))
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;GET&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;/ping&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gin&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Context&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;JSON&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;200&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gin&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;H&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;message&amp;amp;#34;&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;pong&amp;amp;#34;&amp;lt;/span&amp;gt;,
})
})
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;browser&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;OpenURL&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;http://127.0.0.1:8080/ui&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Open: http://127.0.0.1:8080/ui&amp;amp;#34;&amp;lt;/span&amp;gt;)
}()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Run&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// listen and serve on 0.0.0.0:8080 (for windows &amp;amp;#34;localhost:8080&amp;amp;#34;)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;这里就可以直接 go run main.go 了，不依赖前端静态文件，直接在浏览器打开 &amp;lt;strong&amp;gt;&amp;lt;a href=&amp;#34;http://127.0.0.1:8080/ui&amp;#34;&amp;gt;http://127.0.0.1:8080/ui&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt; 即可。&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;为了验证，可以 build 生成到其他目录， 然后运行。&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;go build -o /tmp/demo main.go
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;相关代码： &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/ginvue&amp;#34;&amp;gt;https://github.com/Allenxuxu/ginvue&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description></item><item><title>Golang slice map channel 小技巧</title><link>https://blog.iofree.xyz/posts/go/go-slice-map-channel/</link><pubDate>Sat, 17 Apr 2021 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/go/go-slice-map-channel/</guid><description>&amp;lt;h2 id=&amp;#34;slice-vs-array&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;Slice vs Array&amp;lt;/strong&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;h3 id=&amp;#34;slice-和-array-是不同的类型&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;Slice 和 Array 是不同的类型&amp;lt;/strong&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;package main
func main() {
s := make([]int, 100)
printSlice(s)
var a [100]int
printArray(a)
}
func printSlice(s []int) {
println(len(s)) // 100
println(cap(s)) // 100
}
func printArray(a [100]int) {
println(len(a)) // 100
println(cap(a)) // 100
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Slice 结构体&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;type slice struct {
array unsafe.Pointer
len int
cap int
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;下面的汇编表明，当类型是 slice 的时候，打印 len 或者 cap 的时候，会去栈上取数据:&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;MOVQ 0x28(SP), AX
MOVQ AX, 0x8(SP)
CALL 0xbfc [1:5]R_CALL:runtime.printlock&amp;amp;lt;1&amp;amp;gt;
MOVQ 0x8(SP), AX
MOVQ AX, 0(SP)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;**而当类型是 array 时候，直接用的 0x64 (10进制 100)： **&amp;lt;code&amp;gt;MOVQ $0x64, 0(SP)&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h4 id=&amp;#34;查看具体汇编代码&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;查看具体汇编代码&amp;lt;/strong&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;go tool compile -N -l main.go
go tool objdump main.o
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;h3 id=&amp;#34;slice-的自动扩容&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;Slice 的自动扩容&amp;lt;/strong&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Slice 可以使用 append 函数新增数据，当容量不足的时候，会自动新申请一块空间，将原有数据复制过去，再新增数据。&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/golang/go/blob/2ebe77a2fda1ee9ff6fd9a3e08933ad1ebaea039/src/runtime/slice.go#L125&amp;#34;&amp;gt;https://github.com/golang/go/blob/2ebe77a2fda1ee9ff6fd9a3e08933ad1ebaea039/src/runtime/slice.go#L125&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;**当 cap &amp;amp;lt; 1024 的时候，每次 *2 **&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;当 cap &amp;amp;gt;= 1024 的时候，每次 * 1.25&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;其中还会涉及内存对齐的调整&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;package main
import &amp;amp;quot;fmt&amp;amp;quot;
func main() {
var s []int
for i:=0;i&amp;amp;lt;3;i++ {
s = append(s, i)
}
fmt.Println(s) // [0 1 2]
modifySlice(s)
fmt.Println(s) // [1024 1 2]
}
func modifySlice(s []int) {
s = append(s, 2048)
s[0] = 1024
fmt.Println(s) // [1024 1 2 2048]
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Golang 中都是值传递，所以 modifySlice 函数的入参，只是复制了 slice struct 中 array ，len， cap 三个字段的值来初始化函数内的局部变量 s 。&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;所以，当函数内部进行 append 发送扩容了的话，会新申请一块空间，然后让 array 指针指向他。函数外部的 slice 变量是不会变化的，array 指针仍然不变。&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;所以，个人觉得，对于需要在函数内部 append slice 的情况一律传递 &amp;lt;strong&amp;gt;&amp;lt;code&amp;gt;*[]int&amp;lt;/code&amp;gt;&amp;lt;/strong&amp;gt; 。&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;var-s-int--nil&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;var s []int == nil&amp;lt;/strong&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;package main
import (
&amp;amp;quot;encoding/json&amp;amp;quot;
&amp;amp;quot;fmt&amp;amp;quot;
)
func main() {
var s []int
d, _ := json.Marshal(s)
fmt.Println(string(d)) // null
fmt.Println(s == nil) // true
s2 := []int{}
d, _ = json.Marshal(s2)
fmt.Println(string(d)) // []
fmt.Println(s2 == nil) // false
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;h3 id=&amp;#34;高效的-append&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;高效的 append&amp;lt;/strong&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;func BenchmarkAppendSlice(b *testing.B) {
for i := 0; i &amp;amp;lt; b.N; i++ {
s := make([]int, 0, 10000)
for j := 0; j &amp;amp;lt; 10000; j++ {
s = append(s, j)
}
}
}
func BenchmarkAppendSliceIndexed(b *testing.B) {
for i := 0; i &amp;amp;lt; b.N; i++ {
s := make([]int, 10000)
for j := 0; j &amp;amp;lt; 10000; j++ {
s[j] = j
}
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;BenchmarkAppendSlice-12 110247 10832 ns/op
BenchmarkAppendSliceIndexed-12 137204 8585 ns/op
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;因为 append 操作内部会每次去检查容量是不是够，即每次调用 runtime.growslice ，下面为截取的部分汇编。&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;MOVQ AX, 0x50(SP)
LEAQ 0(IP), SI [3:7]R_PCREL:type.int
MOVQ SI, 0(SP)
MOVQ BX, 0x8(SP)
MOVQ AX, 0x10(SP)
MOVQ DX, 0x18(SP)
MOVQ CX, 0x20(SP)
NOPL 0(AX)
CALL 0x5d6 [1:5]R_CALL:runtime.growslice&amp;amp;lt;1&amp;amp;gt;
MOVQ 0x28(SP), BX
MOVQ 0x30(SP), AX
MOVQ 0x38(SP), DX
LEAQ 0x1(AX), CX
MOVQ 0x50(SP), AX
JMP 0x57b
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;h3 id=&amp;#34;边界检查消除&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;边界检查消除&amp;lt;/strong&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://gfw.go101.org/article/bounds-check-elimination.html&amp;#34;&amp;gt;https://gfw.go101.org/article/bounds-check-elimination.html&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;func normal(s []int) int {
i := 0
i += s[0]
i += s[1]
i += s[2]
i += s[3]
i += s[4]
return i
}
func bce(s []int) int {
_ = s[4]
i := 0
i += s[0]
i += s[1]
i += s[2]
i += s[3]
i += s[4]
return i
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;第一种情况下，golang 会在每一次按下标取值时调用 runtime.panicIndex 检查是否越界。&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;下面是截取的部分汇编：&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;下面的需要开启优化选项来编译 go tool compile main.go&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;normal&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;CALL 0x8ce [1:5]R_CALL:runtime.panicIndex
MOVL $0x3, AX
CALL 0x8d8 [1:5]R_CALL:runtime.panicIndex
MOVL $0x2, AX
NOPL
CALL 0x8e3 [1:5]R_CALL:runtime.panicIndex
MOVL $0x1, AX
CALL 0x8ed [1:5]R_CALL:runtime.panicIndex
XORL AX, AX
CALL 0x8f4 [1:5]R_CALL:runtime.panicIndex
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Bce&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;CALL 0xab8 [1:5]R_CALL:runtime.printint&amp;amp;lt;1&amp;amp;gt;
CALL 0xabd [1:5]R_CALL:runtime.printnl&amp;amp;lt;1&amp;amp;gt;
CALL 0xac2 [1:5]R_CALL:runtime.printunlock&amp;amp;lt;1&amp;amp;gt;
MOVQ 0x18(SP), BP
ADDQ $0x20, SP
RET
MOVL $0x3, AX
CALL 0xad6 [1:5]R_CALL:runtime.panicIndex
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;h3 id=&amp;#34;总结&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;总结&amp;lt;/strong&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Golang 中 数组 和 slice 是两种完全不同的类型，也有着不同的行为&amp;lt;/strong&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;数组的不可改变，是其类型声明的一部分&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Slice 本质是一个 struct，包含一个执行数据地址的指针，len 字段记录长度，cap 字段记录容量&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Golang 中函数传参&amp;lt;/strong&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;如果是 slice ，则会复制内部的三个字段值来初始化一个新的 slice 变量&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;如果是 array，则会重新申请一块内存，复制整个数组的内容到新的 array 变量&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;*&amp;lt;em&amp;gt;如果在函数内部 append 这个slice，一定要传递 &amp;lt;em&amp;gt;[]int&amp;lt;/em&amp;gt;&amp;lt;/em&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Slice 的 append 函数内部会每次都调用 runtime.growslice ，检查是否需要扩容，在容量已经确定的情况下，用 index 更高效。&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;边界检查优化&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;map&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;Map&amp;lt;/strong&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Map 主要是要了解一些源码实现，详情可以看下面的文章分析&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://qcrao.com/2019/05/22/dive-into-go-map/&amp;#34;&amp;gt;https://qcrao.com/2019/05/22/dive-into-go-map/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;总结-1&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;总结&amp;lt;/strong&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Map 删除 key 不会缩容，也不会释放空间&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Map 的 key value 都不可取值&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Map 内部和 slice 类似，都是用指针指向具体存储，所以用 map 作为函数参数，在函数内部可以修改map&amp;lt;/strong&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;不同的是，如果在函数内部 map 发生扩容，是会作用于外部的 map 的，因为 map 内部采用拉链法，不同于 slice 的申请一个新空间然后复制过去&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Map 非并发安全，并发访问使用 sync.Map&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;channel&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;Channel&amp;lt;/strong&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://qcrao.com/2019/07/22/dive-into-go-channel/&amp;#34;&amp;gt;https://qcrao.com/2019/07/22/dive-into-go-channel/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h4 id=&amp;#34;总结-2&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;总结&amp;lt;/strong&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Channel 内部使用锁实现&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Channel 会触发调度&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Channel 发送的数据是值拷贝的，有必要的话需要传指针减少复制开销&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;For 循环里面的 select 内部的 break 只会跳出 select&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;</description></item><item><title>golang protobuf 字段为零值时 json 序列化忽略问题</title><link>https://blog.iofree.xyz/posts/practice/protobuf-json/</link><pubDate>Tue, 02 Jun 2020 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/practice/protobuf-json/</guid><description>&amp;lt;p&amp;gt;protoc 编译生成的 pb.go 文件，默认情况下 tag 中会设置 json 忽略零值的返回属性 &amp;lt;code&amp;gt;omitempty&amp;lt;/code&amp;gt;。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Message&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Header&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;`protobuf:&amp;amp;#34;bytes,1,rep,name=header,proto3&amp;amp;#34; json:&amp;amp;#34;header,omitempty&amp;amp;#34; protobuf_key:&amp;amp;#34;bytes,1,opt,name=key,proto3&amp;amp;#34; protobuf_val:&amp;amp;#34;bytes,2,opt,name=value,proto3&amp;amp;#34;`&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Body&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;`protobuf:&amp;amp;#34;bytes,2,opt,name=body,proto3&amp;amp;#34; json:&amp;amp;#34;body,omitempty&amp;amp;#34;`&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;XXX_NoUnkeyedLiteral&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{} &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;`json:&amp;amp;#34;-&amp;amp;#34;`&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;XXX_unrecognized&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;`json:&amp;amp;#34;-&amp;amp;#34;`&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;XXX_sizecache&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int32&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;`json:&amp;amp;#34;-&amp;amp;#34;`&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;一个比较 hack 的方式，是在 pb.go 文件生成后，手动去删掉 &amp;lt;code&amp;gt;omitempty&amp;lt;/code&amp;gt; 。每次手动去删除，比较麻烦且容易出错，下面提供一个 Makefile ，每次生成 pb.go 的时候就去删除 &amp;lt;code&amp;gt;omitempty&amp;lt;/code&amp;gt; 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-makefile&amp;#34; data-lang=&amp;#34;makefile&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;proto&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:&amp;lt;/span&amp;gt;
protoc --proto_path&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;. --go_out&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;. --micro_out&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;. config/config.proto
ls config/*.pb.go | xargs -n1 -IX bash -c &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#39;sed s/,omitempty// X &amp;amp;gt; X.tmp &amp;amp;amp;&amp;amp;amp; mv X{.tmp,}&amp;amp;#39;&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;proto 目标的第一个命令是调用 protoc 根据 config/config.proto 生成 pb.go 文件；&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;第二行命令就是将 config/*.pb.go 中的 &amp;lt;code&amp;gt;omitempty&amp;lt;/code&amp;gt; 删除。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Message&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Header&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;`protobuf:&amp;amp;#34;bytes,1,rep,name=header,proto3&amp;amp;#34; json:&amp;amp;#34;header&amp;amp;#34; protobuf_key:&amp;amp;#34;bytes,1,opt,name=key,proto3&amp;amp;#34; protobuf_val:&amp;amp;#34;bytes,2,opt,name=value,proto3&amp;amp;#34;`&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Body&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;`protobuf:&amp;amp;#34;bytes,2,opt,name=body,proto3&amp;amp;#34; json:&amp;amp;#34;body&amp;amp;#34;`&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;XXX_NoUnkeyedLiteral&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{} &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;`json:&amp;amp;#34;-&amp;amp;#34;`&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;XXX_unrecognized&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;`json:&amp;amp;#34;-&amp;amp;#34;`&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;XXX_sizecache&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int32&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;`json:&amp;amp;#34;-&amp;amp;#34;`&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;使用时，根据需要修改 &amp;lt;code&amp;gt;config/config.proto&amp;lt;/code&amp;gt; 和 &amp;lt;code&amp;gt;config/*.pb.go&amp;lt;/code&amp;gt; 即可。&amp;lt;/p&amp;gt;</description></item><item><title>go chan 实用示例</title><link>https://blog.iofree.xyz/posts/go/go-channel/</link><pubDate>Sat, 30 May 2020 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/go/go-channel/</guid><description>&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;尝试发送&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;select&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{}{}:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;chan 已满，发送不成功&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;尝试接收&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;select&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;chan 中没有信息，接收不成功&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;标准编译器对尝试发送和尝试接收代码块做了特别的优化，使得它们的执行效率比多 &amp;lt;code&amp;gt;case&amp;lt;/code&amp;gt;分支的普通 &amp;lt;code&amp;gt;select&amp;lt;/code&amp;gt;代码块执行效率高得多。&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;无阻塞的检查一个 chan 是否关闭&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;假设我们可以保证没有任何协程会向一个通道发送数据，则我们可以使用下面的代码来（并发安全地）检查此通道是否已经关闭，此检查不会阻塞当前协程。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;IsClosed&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;select&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;最快回应&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;math/rand&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;time&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;source&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;id&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;rb&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;rand&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Intn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;)&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 休眠1秒/2秒/3秒
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Duration&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;rb&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 使用尝试放松，防止阻塞
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;select&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;id&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;rand&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Seed&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Now&amp;lt;/span&amp;gt;().&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;UnixNano&amp;lt;/span&amp;gt;())
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 此通道容量必须至少为1
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;5&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;source&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;id&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 只采用第一个成功发送的回应数据
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;id&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;超时机制&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;doRequest&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;10&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;requestWithTimeout&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;timeout&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Duration&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;doRequest&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 可能需要超出预期的时长回应
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;select&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;After&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;timeout&amp;lt;/span&amp;gt;):
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errors&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;超时了！&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;防止重复 close chan&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Stop&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;select&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;exit&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
close(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;exit&amp;lt;/span&amp;gt;)&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;g&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;</description></item><item><title>二叉堆与堆排序</title><link>https://blog.iofree.xyz/posts/algorithm/heap/</link><pubDate>Sat, 30 May 2020 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/algorithm/heap/</guid><description>&amp;lt;p&amp;gt;二叉堆是一组能够用堆有序的完全二叉树排序的元素，一般用数组来存储。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;大顶堆， 每个结点的值都大于或等于其左右孩子结点的值，其顶部为最大值。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;小顶堆，每个结点的值都小于或等于其左右孩子结点的值，其顶部为最小值。&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;#34;二叉堆&amp;#34;&amp;gt;二叉堆&amp;lt;/h1&amp;gt;
&amp;lt;h2 id=&amp;#34;性质&amp;#34;&amp;gt;性质&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;根节点在数组中的位置是 1
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;左边子节点 2i&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;em&amp;gt;右子节点&amp;lt;/em&amp;gt; 2i+1&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;父节点 i / 2&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;最后一个非叶子节点为 len / 2&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;根节点在数组中的位置是 0&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;左子节点 2i + 1&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;右边子节点 2i+ 2&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;父节点的下标是 (i − 1) / 2&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;最后一个非叶子节点为 len / 2 - 1&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://cdn.jsdelivr.net/gh/Allenxuxu/blog/img/GBVrk0PC8bZg7t95.png!thumbnail&amp;#34; alt=&amp;#34;&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;图片来自知乎&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;h2 id=&amp;#34;实现&amp;#34;&amp;gt;实现&amp;lt;/h2&amp;gt;
&amp;lt;h3 id=&amp;#34;构造二叉堆&amp;#34;&amp;gt;构造二叉堆&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;找到最后一个非叶子节点 ( len / 2 或者 len / 2 - 1）&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;从最后一个非叶子节点下标索引开始递减，逐个下沉&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3 id=&amp;#34;插入节点&amp;#34;&amp;gt;插入节点&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;在数组的最末尾插入新节点&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;将最后一个节点上浮，时间复杂度为O(log n)
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;比较当前节点与父节点&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;不满足 堆性质* *则交换&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3 id=&amp;#34;删除根节点&amp;#34;&amp;gt;删除根节点&amp;lt;/h3&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;删除根节点用于堆排序&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;对于最大堆，删除根节点就是删除最大值；&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;对于最小堆，是删除最小值。&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;交换根节点和最后一个节点&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;将此时的根节点下沉，时间复杂度为O(log n)
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;比较当前节点与子节点（左，右）&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;不满足 堆性质 则交换&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;删除最后一个节点&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;代码&amp;#34;&amp;gt;代码&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/dsa/blob/master/heap/heap.go&amp;#34;&amp;gt;https://github.com/Allenxuxu/dsa/blob/master/heap/heap.go&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;#34;堆排序&amp;#34;&amp;gt;堆排序&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;堆排序是借助“堆”这种数据结构进行排序的排序算法。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;实现-1&amp;#34;&amp;gt;实现&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;将原数组构造成堆&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;将堆顶元素和数组最后一个元素交换，然后执行下沉操作修复堆（此时修复的堆长度-1，最后一个元素用来存放有序数据）&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;重复上述步骤，直至堆为空&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;代码-1&amp;#34;&amp;gt;代码&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/dsa/blob/master/sort/heapsort.go&amp;#34;&amp;gt;https://github.com/Allenxuxu/dsa/blob/master/sort/heapsort.go&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Interface&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Len is the number of elements in the collection.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Len&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Less reports whether the element with
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// index i should sort before the element with index j.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Less&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;j&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Swap swaps the elements with indexes i and j.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Swap&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;j&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;down&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Interface&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;child&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// left child
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;child&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gt&amp;lt;/span&amp;gt;;= &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;break&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;child&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lt&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;amp&amp;lt;/span&amp;gt;;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;amp&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Less&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;child&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;child&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// right = child+1
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;child&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Less&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;child&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Swap&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;child&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;child&amp;lt;/span&amp;gt;
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;HeapSort&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Interface&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Len&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Build heap with greatest element at top.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gt&amp;lt;/span&amp;gt;;= &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;--&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;down&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Pop elements, largest first, into end of data.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gt&amp;lt;/span&amp;gt;;= &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;--&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Swap&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;down&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;应用&amp;#34;&amp;gt;应用&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;堆排序是唯一能够同时最优化的利用空间和时间的方法 &amp;amp;ndash; 在最坏的情况下也能保证使用 2NlogN 次比较和恒定额外空间。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;但是，现代系统中许多应用很少使用它，因为它无法利用缓存 &amp;amp;ndash; 数组元素很少和相邻的元素进行比较。因此缓存命中次数远低于在相邻元素进行比较的算法，如快速排序，归并排序，甚至是希尔排序。&amp;lt;/p&amp;gt;</description></item><item><title>二叉树的遍历模版（递归，迭代）</title><link>https://blog.iofree.xyz/posts/algorithm/tree-traversal/</link><pubDate>Sun, 26 Apr 2020 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/algorithm/tree-traversal/</guid><description>&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://cdn.jsdelivr.net/gh/Allenxuxu/blog/img/image-20210424121612528.png&amp;#34; alt=&amp;#34;image-20210424121612528&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;图片来自 leetcode&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;深度优先遍历（dfs）
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;前序遍历&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;中序遍历&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;后序遍历&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;广度优先遍历（bfs）&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Val&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Left&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Right&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;深度优先遍历&amp;#34;&amp;gt;深度优先遍历&amp;lt;/h2&amp;gt;
&amp;lt;h3 id=&amp;#34;递归&amp;#34;&amp;gt;递归&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;递归版本，代码比较简单，只需改变 append 数据的位置即可。&amp;lt;/p&amp;gt;
&amp;lt;h4 id=&amp;#34;前序遍历&amp;#34;&amp;gt;前序遍历&amp;lt;/h4&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;preorderTraversal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;) []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;helper&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;helper&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;[]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Val&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;helper&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Left&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;helper&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Right&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h4 id=&amp;#34;中序遍历&amp;#34;&amp;gt;中序遍历&amp;lt;/h4&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;inorderTraversal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;) []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;helper&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;helper&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;[]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;helper&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Left&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Val&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;helper&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Right&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h4 id=&amp;#34;后序遍历&amp;#34;&amp;gt;后序遍历&amp;lt;/h4&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;postorderTraversal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;) []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;helperPostOrder&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;helperPostOrder&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;[]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;helperPostOrder&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Left&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;helperPostOrder&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Right&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Val&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;迭代&amp;#34;&amp;gt;迭代&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;迭代版本，稍微复杂，需要模拟函数调用栈，需要使用 stack，只需要改变压栈的位置即可，代码模版性较好，便于记忆。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;在文末附录有基于 golang 标准库的 list 实现的 stack 。&amp;lt;/p&amp;gt;
&amp;lt;h4 id=&amp;#34;前序遍历-1&amp;#34;&amp;gt;前序遍历&amp;lt;/h4&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;preorderTraversal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;) []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stack&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Len&amp;lt;/span&amp;gt;() &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Pop&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Right&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//右节点先压栈，最后处理
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Right&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Left&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Left&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//当前节点重新压栈（留着以后处理），因为先序遍历所以最后压栈
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//在当前节点之前加入一个空节点表示已经访问过了
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; } &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 当前 c == nil , 说明这个节点已经访问过了
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Pop&amp;lt;/span&amp;gt;().(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// node 是上面 s.Push(node) 中的那个 node
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Val&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h4 id=&amp;#34;中序遍历-1&amp;#34;&amp;gt;中序遍历&amp;lt;/h4&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;inorderTraversal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;) []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stack&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Len&amp;lt;/span&amp;gt;() &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Pop&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Right&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Right&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//右节点先压栈，最后处理
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Left&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Left&amp;lt;/span&amp;gt;)
}
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Pop&amp;lt;/span&amp;gt;().(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Val&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h4 id=&amp;#34;后序遍历-1&amp;#34;&amp;gt;后序遍历&amp;lt;/h4&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;postorderTraversal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;) []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stack&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Len&amp;lt;/span&amp;gt;() &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Pop&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Right&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Right&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Left&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Left&amp;lt;/span&amp;gt;)
}
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Pop&amp;lt;/span&amp;gt;().(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Val&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;广度优先遍历&amp;#34;&amp;gt;广度优先遍历&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;广度优先遍历需要使用 queue，文末附录有 queue 的简单实现。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;levelOrder&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;) [][]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt; [][]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;queue&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;10&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;root&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Len&amp;lt;/span&amp;gt;() &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;size&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Len&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tmp&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;size&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;size&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Pop&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tmp&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tmp&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Val&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Left&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Left&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Right&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;node&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Right&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tmp&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;附录&amp;#34;&amp;gt;附录&amp;lt;/h2&amp;gt;
&amp;lt;h3 id=&amp;#34;stack-实现&amp;#34;&amp;gt;stack 实现&amp;lt;/h3&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stack&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;container/list&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Stack&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{})
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Pop&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Len&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stack&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;list&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;list&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;List&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Stack&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stack&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;list&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;list&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(),
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stack&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;list&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;PushBack&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stack&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Pop&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{} {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;list&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Back&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;list&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Remove&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stack&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Len&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;list&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Len&amp;lt;/span&amp;gt;()
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;queue实现&amp;#34;&amp;gt;queue实现&amp;lt;/h3&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;queue&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;array&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;size&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;queue&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;queue&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;array&amp;lt;/span&amp;gt;: make([]&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;size&amp;lt;/span&amp;gt;),
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;queue&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Push&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;array&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;array&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;queue&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Pop&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TreeNode&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Len&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;e&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;array&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;]
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;array&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;array&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;:]
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;e&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;queue&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Len&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;array&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;</description></item><item><title>[gev] 自定义协议支持</title><link>https://blog.iofree.xyz/posts/open-source/gev-protocol/</link><pubDate>Thu, 31 Oct 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/open-source/gev-protocol/</guid><description>&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;https://github.com/Allenxuxu/gev&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;gev&amp;lt;/code&amp;gt; 是一个轻量、快速的基于 Reactor 模式的非阻塞 TCP 网络库，支持自定义协议，轻松快速搭建高性能服务器。&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;h2 id=&amp;#34;tcp-为什么会粘包&amp;#34;&amp;gt;TCP 为什么会&amp;amp;quot;粘包&amp;amp;quot;&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;TCP 本身就是面向流的协议，就是一串没有界限的数据。所以本质上来说 TCP 粘包是一个伪命题。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;TCP 底层并不关心上层业务数据，会套接字缓冲区的实际情况进行包的划分，一个完整的业务数据可能会被拆分成多次进行发送，也可能会将多个小的业务数据封装成一个大的数据包发送（Nagle算法）。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;gev-如何优雅处理&amp;#34;&amp;gt;gev 如何优雅处理&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;gev 通过回调函数 &amp;lt;code&amp;gt;OnMessage&amp;lt;/code&amp;gt; 通知用户数据到来，回调函数中会将用户数据缓冲区（ringbuffer）通过参数传递过来。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;用户通过对 ringbuffer 操作，来进行数据解包，获取到完整用户数据后再进行业务操作。这样又一个明显的缺点，就是会让业务操作和自定义协议解析代码堆在一起。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;所以，最近对 &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt; 进行了一次较大改动，主要是为了能够以插件的形式支持各种自定义的数据协议，让使用者可以便捷处理 TCP 粘包问题，专注于业务逻辑。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://cdn.jsdelivr.net/gh/Allenxuxu/blog/img/protocol-b8617cda.png&amp;#34; alt=&amp;#34;protocol.png&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;做法如下，定义一个接口 Protocol&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Protocol 自定义协议编解码接口
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;UnPacket&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ringbuffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RingBuffer&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}, []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Packet&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;用户只需实现这个接口，并注册到 server 中，当客户端数据到来时，gev 会首先调用 UnPacket 方法，如果缓冲区中的数据足够组成一帧，则将数据解包，并返回真正的用户数据，然后在回调 OnMessage 函数并将数据通过参数传递。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;下面，我们实现一个简单的自定义协议插件，来启动一个 Server ：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-text&amp;#34; data-lang=&amp;#34;text&amp;#34;&amp;gt;| 数据长度 n | payload |
| 4字节 | n 字节 |
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// protocol.go
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;encoding/binary&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/Allenxuxu/gev/connection&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/Allenxuxu/ringbuffer&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/gobwas/pool/pbytes&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;exampleHeaderLen&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ExampleProtocol&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;d&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ExampleProtocol&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;UnPacket&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;connection&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ringbuffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RingBuffer&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}, []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualLength&amp;lt;/span&amp;gt;() &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;exampleHeaderLen&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buf&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pbytes&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;GetLen&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;exampleHeaderLen&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pbytes&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Put&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buf&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buf&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;dataLen&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;binary&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;BigEndian&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Uint32&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buf&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualLength&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;gt;=&amp;lt;/span&amp;gt; int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;dataLen&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;dataLen&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualFlush&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualRevert&amp;lt;/span&amp;gt;()
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;d&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ExampleProtocol&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Packet&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;connection&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;dataLen&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;exampleHeaderLen&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;dataLen&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;binary&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;BigEndian&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;PutUint32&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;, uint32(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;dataLen&amp;lt;/span&amp;gt;))
copy(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;:], &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// server.go
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;flag&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;log&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;strconv&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/Allenxuxu/gev&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/Allenxuxu/gev/connection&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;example&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;example&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;OnConnect&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;connection&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34; OnConnect ： &amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;PeerAddr&amp;lt;/span&amp;gt;())
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;example&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;OnMessage&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;connection&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ctx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;OnMessage：&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;example&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;OnClose&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;connection&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;OnClose&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; new(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;example&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;IntVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;port&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1833&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;server port&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;IntVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;loops&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;num loops&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Parse&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gev&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NewServer&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gev&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Address&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;:&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;strconv&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Itoa&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;)),
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gev&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NumLoops&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;),
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gev&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ExampleProtocol&amp;lt;/span&amp;gt;{}))
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
panic(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;server start&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Start&amp;lt;/span&amp;gt;()
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev/tree/master/example/protocol&amp;#34;&amp;gt;完整代码地址&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当回调 &amp;lt;code&amp;gt;OnMessage&amp;lt;/code&amp;gt; 函数的时候，会通过参数传递已经拆好包的用户数据。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当我们需要使用其他协议时，仅仅需要实现一个 Protocol 插件，然后只要 &amp;lt;code&amp;gt;gev.NewServer&amp;lt;/code&amp;gt; 时指定即可：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gev&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NewServer&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gev&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NumLoops&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;), &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gev&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;XXXProtocol&amp;lt;/span&amp;gt;{}))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;基于-protocol-plugins-模式为-gev-实现-websocket-插件&amp;#34;&amp;gt;基于 Protocol Plugins 模式为 gev 实现 WebSocket 插件&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;得益于 Protocol Plugins 模式的引进，我可以将 WebSocket 的实现做成一个插件（WebSocket 协议构建在 TCP 之上），独立于 gev 之外。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;websocket&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;log&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/Allenxuxu/gev/connection&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/Allenxuxu/gev/plugins/websocket/ws&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/Allenxuxu/ringbuffer&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Protocol websocket
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;upgrade&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ws&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Upgrader&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// New 创建 websocket Protocol
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;u&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ws&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Upgrader&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;upgrade&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;u&amp;lt;/span&amp;gt;}
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// UnPacket 解析 websocket 协议，返回 header ，payload
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;UnPacket&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;connection&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ringbuffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RingBuffer&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ctx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;upgraded&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Context&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;upgraded&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;upgrade&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Upgrade&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Websocket Upgrade :&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SetContext&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;)
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;header&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ws&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualReadHeader&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualLength&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;gt;=&amp;lt;/span&amp;gt; int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;header&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Length&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualFlush&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;payload&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;, int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;header&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Length&amp;lt;/span&amp;gt;))
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Read&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;payload&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;header&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Masked&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ws&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Cipher&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;payload&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;header&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Mask&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ctx&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;header&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;payload&amp;lt;/span&amp;gt;
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualRevert&amp;lt;/span&amp;gt;()
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Packet 直接返回
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Packet&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;connection&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;具体的实现，可以到仓库的 &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev/tree/master/plugins/websocket&amp;#34;&amp;gt;plugins/websocket&amp;lt;/a&amp;gt; 查看。&amp;lt;/p&amp;gt;</description></item><item><title>Uber Go 风格指南</title><link>https://blog.iofree.xyz/posts/go/uber-go-guide/</link><pubDate>Sun, 13 Oct 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/go/uber-go-guide/</guid><description>&amp;lt;h1 id=&amp;#34;uber-go-风格指南&amp;#34;&amp;gt;Uber Go 风格指南&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;译文：https://github.com/Allenxuxu/uber-go-guide&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;原文：https://github.com/uber-go/guide/blob/master/style.md&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;简介&amp;#34;&amp;gt;简介&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;风格是指规范代码的共同约定。风格一词其实是有点用词不当的，因为共同约定的范畴远远不止 gofmt 所做的源代码格式化这些。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;本指南旨在通过详尽描述 Uber 在编写 Go 代码中的注意事项（规定）来解释其中复杂之处。制定这些注意事项（规定）是为了提高代码可维护性同时也让工程师们高效的使用 Go 的特性。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;这份指南最初由 Prashant Varanasi 和 Simon Newton 编写，目的是让一些同事快速上手 Go 。多年来，已经根据其他人的反馈不断修改。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;这份文档记录了我们在 Uber 遵守的 Go 惯用准则。其中很多准则是 Go 的通用准则，其他方面依赖于外部资源：&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://golang.org/doc/effective_go.html&amp;#34;&amp;gt;Effective Go&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/golang/go/wiki/CodeReviewComments&amp;#34;&amp;gt;The Go common mistakes guide&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;所有的代码都应该通过 &amp;lt;code&amp;gt;golint&amp;lt;/code&amp;gt; 和 &amp;lt;code&amp;gt;go vet&amp;lt;/code&amp;gt; 检查。我们建议您设置编辑器：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;保存时自动运行 &amp;lt;code&amp;gt;goimports&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;自动运行 &amp;lt;code&amp;gt;golint&amp;lt;/code&amp;gt; 和 &amp;lt;code&amp;gt;go vet&amp;lt;/code&amp;gt; 来检查错误&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;您可以在这找到关于编辑器设定 Go tools 的相关信息：&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins&amp;#34;&amp;gt;https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;指南&amp;#34;&amp;gt;指南&amp;lt;/h2&amp;gt;
&amp;lt;h3 id=&amp;#34;指向接口interface的指针&amp;#34;&amp;gt;指向接口（interface）的指针&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;你基本永远不需要一个指向接口的指针。你应该直接将接口作为值传递，因为接口的底层数据就是指针。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;一个接口包含两个字段：&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;类型指针，指向某些特定类型信息的指针。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;数据指针。如果存储数据是一个指针变量，那就直接存储。如果存储数据是一个值变量，那就存储指向该值的指针。&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;如果你需要接口方法来修改这些底层数据，那你必须使用指针。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;方法接收器和接口&amp;#34;&amp;gt;方法接收器和接口&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;具有值类型接收器的方法可以被值类型和指针类型调用。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;例如，&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;S&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;S&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Read&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;S&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Write&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;str&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;str&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sVals&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;S&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;: {&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;A&amp;amp;#34;&amp;lt;/span&amp;gt;}}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 值类型变量只能调用 Read 方法
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sVals&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;].&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Read&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 无法编译通过:
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// sVals[0].Write(&amp;amp;#34;test&amp;amp;#34;)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sPtrs&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;S&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;: {&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;A&amp;amp;#34;&amp;lt;/span&amp;gt;}}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 指针类型变量可以调用 Read 和 Write 方法：
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sPtrs&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;].&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Read&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sPtrs&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;].&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Write&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;test&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;同理，即使方法是值类型接收器，接口也可以通过指针来满足调用需求。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;F&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;()
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;S1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;S1&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;() {}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;S2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;S2&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;() {}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s1Val&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;S1&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s1Ptr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;S1&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s2Val&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;S2&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s2Ptr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;S2&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;F&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s1Val&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s1Ptr&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s2Ptr&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 无法编译通过, 因为 s2Val 是一个值类型变量, 并且 f 方法不具有值类型接收器。
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// i = s2Val
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Effective Go 中关于 &amp;lt;a href=&amp;#34;https://golang.org/doc/effective_go.html#pointers_vs_values&amp;#34;&amp;gt;Pointers vs. Values&amp;lt;/a&amp;gt; 写的很棒。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;零值mutexes是有效的&amp;#34;&amp;gt;零值Mutexes是有效的&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;零值的 &amp;lt;code&amp;gt;sync.Mutex&amp;lt;/code&amp;gt; 和 &amp;lt;code&amp;gt;sync.RWMutex&amp;lt;/code&amp;gt; 是有效的，所以基本是不需要一个指向 &amp;lt;code&amp;gt;Mutex&amp;lt;/code&amp;gt; 的指针的。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mu&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; new(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sync&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Mutex&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mu&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Lock&amp;lt;/span&amp;gt;()
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mu&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sync&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Mutex&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mu&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Lock&amp;lt;/span&amp;gt;()
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;如果你希望通过指针操作结构体，mutex 可以作为其非指针结构体字段，或者最好直接嵌入结构体中。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;smap&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sync&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Mutex&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;newSMap&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;smap&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;smap&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;: make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;),
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;m&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;smap&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Get&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;k&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;m&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Lock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;m&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Unlock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;m&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;k&amp;lt;/span&amp;gt;]
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SMap&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mu&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sync&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Mutex&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NewSMap&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SMap&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SMap&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;: make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;),
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;m&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SMap&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Get&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;k&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;m&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mu&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Lock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;m&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mu&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Unlock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;m&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;k&amp;lt;/span&amp;gt;]
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;slices和maps的边界拷贝操作&amp;#34;&amp;gt;Slices和Maps的边界拷贝操作&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;切片和 map 包含一个指针来指向底层数据，所以当需要复制他们时需要特别注意。&amp;lt;/p&amp;gt;
&amp;lt;h4 id=&amp;#34;接收slices和maps&amp;#34;&amp;gt;接收Slices和Maps&amp;lt;/h4&amp;gt;
&amp;lt;p&amp;gt;请记住，如果存储了对 slice 或 map 的引用，那么用户是可以对其进行修改。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;d&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Driver&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SetTrips&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trips&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trip&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;d&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trips&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trips&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trips&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;d1&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SetTrips&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trips&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 是想修改 d1.trips 吗？
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trips&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;] = &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;d&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Driver&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SetTrips&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trips&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trip&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;d&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trips&amp;lt;/span&amp;gt; = make([]&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trip&amp;lt;/span&amp;gt;, len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trips&amp;lt;/span&amp;gt;))
copy(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;d&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trips&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trips&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trips&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;d1&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SetTrips&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trips&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 修改 trips[0] 并且不影响 d1.trips 。
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trips&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;] = &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h4 id=&amp;#34;返回-slices-和-maps&amp;#34;&amp;gt;返回 Slices 和 Maps&amp;lt;/h4&amp;gt;
&amp;lt;p&amp;gt;同理，谨慎提防用户修改暴露内部状态的 slices 和 maps 。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Stats&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sync&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Mutex&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;counters&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Snapshot 返回当前状态
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Stats&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Snapshot&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Lock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Unlock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;counters&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// snapshot 不再受锁保护了！
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;snapshot&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stats&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Snapshot&amp;lt;/span&amp;gt;()
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Stats&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sync&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Mutex&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;counters&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Stats&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Snapshot&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Lock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Unlock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;result&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;counters&amp;lt;/span&amp;gt;))
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;k&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;counters&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;result&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;k&amp;lt;/span&amp;gt;] = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;result&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// snapshot 是一分拷贝的内容了
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;snapshot&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stats&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Snapshot&amp;lt;/span&amp;gt;()
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;使用-defer-来做清理工作&amp;#34;&amp;gt;使用 defer 来做清理工作&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;使用 defer 来做资源的清理工作，例如文件的关闭和锁的释放。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Lock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;10&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Unlock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;newCount&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Unlock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;newCount&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 当有多处 return 时容易忘记释放锁
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Lock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Unlock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;10&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 可读性更高
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;defer 只有非常小的性能开销，只有当你能证明你的函数执行时间在纳秒级别时才可以不使用它。使用 defer 对代码可读性的提高是非常值得的，因为使用 defer 的成本真的非常小。特别是在一些主要是做内存操作的长函数中，函数中的其他计算操作远比 &amp;lt;code&amp;gt;defer&amp;lt;/code&amp;gt; 重要。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;channel-的大小设为-1-还是-none&amp;#34;&amp;gt;Channel 的大小设为 1 还是 None&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;通道的大小通常应该设为 1 或者设为无缓冲类型。默认情况下，通道是无缓冲类型的，大小为 0 。将通道大小设为其他任何数值都应该经过深思熟虑。认真考虑如何确定其大小，是什么阻止了工作中的通道被填满并阻塞了写入操作，以及何种情况会发生这样的现象。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 足以满足任何人！
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;64&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 大小 为 1
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// or
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 无缓冲 channel, 大小为 0
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;枚举类型值从-1-开始&amp;#34;&amp;gt;枚举类型值从 1 开始&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;在 Go 中使用枚举的标准方法是声明一个自定义类型并通过 iota 关键字来声明一个 const 组。但是由于 Go 中变量的默认值都为该类型的零值，所以枚举变量的值应该从非零值开始。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Operation&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Add&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Operation&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;iota&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Subtract&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Multiply&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Add=0, Subtract=1, Multiply=2
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Operation&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Add&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Operation&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;iota&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Subtract&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Multiply&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Add=1, Subtract=2, Multiply=3
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;在某些情况下，从零值开始也是可以的。例如，当零值是我们期望的默认行为时。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LogOutput&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LogToStdout&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LogOutput&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;iota&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LogToFile&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LogToRemote&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// LogToStdout=0, LogToFile=1, LogToRemote=2
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;错误类型&amp;#34;&amp;gt;错误类型&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;有很多种方法来声明 errors:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;errors.New&amp;lt;/code&amp;gt; 声明简单的静态字符串错误信息&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;fmt.Errorf&amp;lt;/code&amp;gt; 声明格式化的字符串错误信息&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;为自定义类型实现 &amp;lt;code&amp;gt;Error()&amp;lt;/code&amp;gt; 方法&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;通过 &amp;lt;code&amp;gt;&amp;amp;quot;pkg/errors&amp;amp;quot;.Wrap&amp;lt;/code&amp;gt; 包装错误类型&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;返回错误时，请考虑以下因素来作出最佳选择：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;这是一个不需要其他额外信息的简单错误吗？如果是，使用&amp;lt;code&amp;gt;error.New&amp;lt;/code&amp;gt;。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;客户需要检测并处理此错误吗？如果是，那应该自定义类型，并实现 &amp;lt;code&amp;gt;Error()&amp;lt;/code&amp;gt; 方法。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;是否是在传递一个下游函数返回的错误？如果是，请查看&amp;lt;a href=&amp;#34;#error-wrapping&amp;#34;&amp;gt;error 封装&amp;lt;/a&amp;gt;部分。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;其他，使用 &amp;lt;code&amp;gt;fmt.Errorf&amp;lt;/code&amp;gt; 。&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;如果客户需要检测错误，并且是通过 &amp;lt;code&amp;gt;errors.New&amp;lt;/code&amp;gt; 创建的一个简单的错误，请使用var 声明这个错误类型。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// package foo
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Open&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errors&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;could not open&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// package bar
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;use&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;foo&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Open&amp;lt;/span&amp;gt;(); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Error&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;could not open&amp;amp;#34;&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// handle
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; } &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
panic(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;unknown error&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// package foo
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ErrCouldNotOpen&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errors&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;could not open&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Open&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ErrCouldNotOpen&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// package bar
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;foo&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Open&amp;lt;/span&amp;gt;(); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;foo&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ErrCouldNotOpen&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// handle
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; } &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
panic(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;unknown error&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;如果你有一个错误需要客户端来检测，并且你想向其添加更多信息（例如，它不是一个简单的静态字符串），那么应该声明一个自定义类型。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;open&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;file&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Errorf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;file %q not found&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;file&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;use&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;open&amp;lt;/span&amp;gt;(); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;strings&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Contains&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Error&amp;lt;/span&amp;gt;(), &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;not found&amp;amp;#34;&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// handle
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; } &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
panic(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;unknown error&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errNotFound&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;file&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;e&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errNotFound&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Error&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sprintf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;file %q not found&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;e&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;file&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;open&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;file&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errNotFound&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;file&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;file&amp;lt;/span&amp;gt;}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;use&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;open&amp;lt;/span&amp;gt;(); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;.(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errNotFound&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// handle
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; } &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
panic(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;unknown error&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;直接将自定义的错误类型设为导出需要特别小心，因为这意味着他们已经成为包的公开 API 的一部分了。更好的方式是暴露一个匹配函数来检测错误。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// package foo
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errNotFound&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;file&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;e&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errNotFound&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Error&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sprintf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;file %q not found&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;e&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;file&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;IsNotFoundError&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;.(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errNotFound&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Open&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;file&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errNotFound&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;file&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;file&amp;lt;/span&amp;gt;}
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// package bar
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;foo&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Open&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;foo&amp;amp;#34;&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;foo&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;IsNotFoundError&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// handle
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; } &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
panic(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;unknown error&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;error-封装&amp;#34;&amp;gt;Error 封装&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;下面提供三种主要的方法来传递函数调用失败返回的错误：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;如果想要维护原始错误类型并且不需要添加额外的上下文信息，就直接返回原始错误。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;使用 &amp;lt;code&amp;gt;&amp;amp;quot;pkg/errors&amp;amp;quot;.Wrap&amp;lt;/code&amp;gt; 来增加上下文信息，这样返回的错误信息中就会包含更多的上下文信息，并且通过 &amp;lt;code&amp;gt;&amp;amp;quot;pkg/errors&amp;amp;quot;.Cause&amp;lt;/code&amp;gt; 可以提取出原始错误信息。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;如果调用方不需要检测或处理特定的错误情况，就直接使用 &amp;lt;code&amp;gt;fmt.Errorf&amp;lt;/code&amp;gt; 。&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;情况允许的话建议增加更多的上下文信息来代替诸如 &amp;lt;code&amp;gt;&amp;amp;quot;connection refused&amp;amp;quot;&amp;lt;/code&amp;gt; 之类模糊的错误信息。返回 &amp;lt;code&amp;gt;&amp;amp;quot;failed to call service foo: connection refused&amp;amp;quot;&amp;lt;/code&amp;gt; 用户可以知道更多有用的错误信息。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;在将上下文信息添加到返回的错误时，请避免使用 &amp;amp;ldquo;failed to&amp;amp;rdquo; 之类的短语以保持信息简洁，这些短语描述的状态是显而易见的，并且会随着错误在堆栈中的传递而逐渐堆积：&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;store&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Errorf&amp;lt;/span&amp;gt;(
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;failed to create new store: %s&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;store&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Errorf&amp;lt;/span&amp;gt;(
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;new store: %s&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-text&amp;#34; data-lang=&amp;#34;text&amp;#34;&amp;gt;failed to x: failed to y: failed to create new store: the error
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-text&amp;#34; data-lang=&amp;#34;text&amp;#34;&amp;gt;x: y: new store: the error
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;但是，如果这个错误信息是会被发送到另一个系统时，必须清楚的表明这是一个错误（例如，日志中 &amp;lt;code&amp;gt;err&amp;lt;/code&amp;gt; 标签或者 &amp;lt;code&amp;gt;Failed&amp;lt;/code&amp;gt; 前缀）。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;另见 &amp;lt;a href=&amp;#34;https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully&amp;#34;&amp;gt;Don&amp;amp;rsquo;t just check errors, handle them gracefully&amp;lt;/a&amp;gt;。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;处理类型断言失败&amp;#34;&amp;gt;处理类型断言失败&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://golang.org/ref/spec#Type_assertions&amp;#34;&amp;gt;类型断言&amp;lt;/a&amp;gt;的单返回值形式在遇到类型错误时会直接 panic 。因此，请始终使用 &amp;amp;ldquo;comma ok&amp;amp;rdquo; 惯用方法。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;.(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;.(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; !&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// handle the error gracefully
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;不要-panic&amp;#34;&amp;gt;不要 Panic&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;生产级的代码必须避免 panics 。panics 是级联故障的主要源头。如果错误发生，函数应该返回错误并且允许调用者决定如果处理它。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;foo&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;bar&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;bar&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
panic(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;bar must not be empty&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// ...
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;os&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Args&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;USAGE: foo &amp;amp;lt;bar&amp;amp;gt;&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;os&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Exit&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;foo&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;os&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Args&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;])
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;foo&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;bar&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;bar&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errors&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;bar must not be empty&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// ...
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;os&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Args&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;USAGE: foo &amp;amp;lt;bar&amp;amp;gt;&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;os&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Exit&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;foo&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;os&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Args&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;]); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
panic(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;Panic/recover 并不是错误处理策略。程序只有在遇到无法处理的情况下才可以 panic ，例如，nil 引用。程序初始化时是一个例外情况：程序启动时遇到需要终止执行的错误可能会 painc 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_statusTemplate&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;template&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Must&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;template&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;name&amp;amp;#34;&amp;lt;/span&amp;gt;).&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Parse&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;_statusHTML&amp;amp;#34;&amp;lt;/span&amp;gt;))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;即使是在测试中，也应优先选择 &amp;lt;code&amp;gt;t.Fatal&amp;lt;/code&amp;gt; 或 &amp;lt;code&amp;gt;t.FailNow&amp;lt;/code&amp;gt; 而非 panic，以确保测试标记为失败。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// func TestFoo(t *testing.T)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ioutil&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TempFile&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;test&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
panic(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;failed to set up test&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// func TestFoo(t *testing.T)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ioutil&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TempFile&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;test&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Fatal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;failed to set up test&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;使用-gouberorgatomic&amp;#34;&amp;gt;使用 go.uber.org/atomic&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Go 的 &amp;lt;code&amp;gt;sync/atomic&amp;lt;/code&amp;gt; 包仅仅提供针对原始类型（int32, int64, &amp;amp;hellip;）的原子操作。因此，很容易忘记使用原子操作来读写变量。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://godoc.org/go.uber.org/atomic&amp;#34;&amp;gt;go.uber.org/atomic&amp;lt;/a&amp;gt; 通过隐藏基础类型，使这些操作类型安全。并且，它还提供一个方便的 &amp;lt;code&amp;gt;atomic.Bool&amp;lt;/code&amp;gt; 类型。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;foo&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;running&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int32&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// atomic
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;foo&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;start&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SwapInt32&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;running&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// already running…
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// start the Foo
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;foo&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;isRunning&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;running&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// race!
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;foo&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;running&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Bool&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;foo&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;start&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;running&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Swap&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// already running…
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// start the Foo
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;foo&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;isRunning&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;running&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Load&amp;lt;/span&amp;gt;()
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h2 id=&amp;#34;性能&amp;#34;&amp;gt;性能&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;性能方面的特定准则，仅适用于热路径。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;strconv-性能优于-fmt&amp;#34;&amp;gt;strconv 性能优于 fmt&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;将原语转换为字符串或从字符串转换时，&amp;lt;code&amp;gt;strconv&amp;lt;/code&amp;gt; 速度比 &amp;lt;code&amp;gt;fmt&amp;lt;/code&amp;gt; 更快。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;N&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sprint&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;rand&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Int&amp;lt;/span&amp;gt;())
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;N&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;strconv&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Itoa&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;rand&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Int&amp;lt;/span&amp;gt;())
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-text&amp;#34; data-lang=&amp;#34;text&amp;#34;&amp;gt;BenchmarkFmtSprint-4 143 ns/op 2 allocs/op
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-text&amp;#34; data-lang=&amp;#34;text&amp;#34;&amp;gt;BenchmarkStrconv-4 64.2 ns/op 1 allocs/op
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;避免-string-to-byte-的转换&amp;#34;&amp;gt;避免 string to byte 的转换&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;不要反复地从字符串字面量创建 byte 切片。相反，执行一次转换后存储结果供后续使用。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;N&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Write&amp;lt;/span&amp;gt;([]byte(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Hello world&amp;amp;#34;&amp;lt;/span&amp;gt;))
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; []byte(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Hello world&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;N&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Write&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-text&amp;#34; data-lang=&amp;#34;text&amp;#34;&amp;gt;BenchmarkBad-4 50000000 22.2 ns/op
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-text&amp;#34; data-lang=&amp;#34;text&amp;#34;&amp;gt;BenchmarkGood-4 500000000 3.25 ns/op
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h2 id=&amp;#34;代码风格&amp;#34;&amp;gt;代码风格&amp;lt;/h2&amp;gt;
&amp;lt;h3 id=&amp;#34;声明分组&amp;#34;&amp;gt;声明分组&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Go 支持将相似的声明分组：&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;a&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;b&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;a&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;b&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;分组同样适用于常量、变量和类型的声明：&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Area&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;float64&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Volume&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;float64&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Area&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;float64&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Volume&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;float64&amp;lt;/span&amp;gt;
)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;仅将相似的声明放在同一组。不相关的声明不要放在同一个组内。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Operation&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Add&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Operation&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;iota&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Subtract&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Multiply&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ENV_VAR&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;MY_ENV&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Operation&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Add&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Operation&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;iota&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Subtract&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Multiply&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ENV_VAR&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;MY_ENV&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;声明分组可以在任意位置使用。例如，可以在函数内部使用。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;red&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;color&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0xff0000&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;green&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;color&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0x00ff00&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;blue&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;color&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0x0000ff&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;red&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;color&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0xff0000&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;green&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;color&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0x00ff00&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;blue&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;color&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0x0000ff&amp;lt;/span&amp;gt;)
)
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;import-组内顺序&amp;#34;&amp;gt;Import 组内顺序&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;import 有两类导入组：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;标准库&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;其他&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;goimports 默认的分组如下：&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;os&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;go.uber.org/atomic&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;golang.org/x/sync/errgroup&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;os&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;go.uber.org/atomic&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;golang.org/x/sync/errgroup&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;包名&amp;#34;&amp;gt;包名&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;当为包命名时，请注意如下事项：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;字符全部小写，没有大写或者下划线&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;在大多数情况下引入包不需要去重命名&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;简单明了，命名需要能够在被导入的地方准确识别&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;不要使用复数。例如，&amp;lt;code&amp;gt;net/url&amp;lt;/code&amp;gt;, 而不是 &amp;lt;code&amp;gt;net/urls&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;不要使用“common”，“util”，“shared”或“lib”之类的。这些都是不好的，表达信息不明的名称&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;另见 &amp;lt;a href=&amp;#34;https://blog.golang.org/package-names&amp;#34;&amp;gt;Package Names&amp;lt;/a&amp;gt; 和 &amp;lt;a href=&amp;#34;https://rakyll.org/style-packages/&amp;#34;&amp;gt;Style guideline for Go packages&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;函数命名&amp;#34;&amp;gt;函数命名&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;我们遵循 Go 社区关于使用的 &amp;lt;a href=&amp;#34;https://golang.org/doc/effective_go.html#mixed-caps&amp;#34;&amp;gt;MixedCaps for function names&amp;lt;/a&amp;gt;。有一种情况例外，对相关的测试用例进行分组时，函数名可能包含下划线，如: &amp;lt;code&amp;gt;TestMyFunction_WhatIsBeingTested&amp;lt;/code&amp;gt;。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;包导入别名&amp;#34;&amp;gt;包导入别名&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;如果包的名称与导入路径的最后一个元素不匹配，那必须使用导入别名。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;net/http&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;client&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;example.com/client-go&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trace&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;example.com/trace/v2&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;在其他情况下，除非导入的包名之间有直接冲突，否则应避免使用导入别名。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;os&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nettrace&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;golang.net/x/trace&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;os&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;runtime/trace&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nettrace&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;golang.net/x/trace&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;函数分组与排布顺序&amp;#34;&amp;gt;函数分组与排布顺序&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;函数应该粗略的按照调用顺序来排布&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;同一文件中的函数应该按照接收器的类型来分组排布&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;所以，公开的函数应排布在文件首，并在 struct、const 和 var 定义之后。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;newXYZ()/ NewXYZ() 之类的函数应该排布在声明类型之后，具有接收器的其余方法之前。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;因为函数是按接收器类别分组的，所以普通工具函数应排布在文件末尾。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;something&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Cost&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;calcCost&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;weights&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;something&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{ &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;calcCost&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;[]) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;something&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Stop&amp;lt;/span&amp;gt;() {&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;newSomething&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;something&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;something&amp;lt;/span&amp;gt;{}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;something&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{ &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;newSomething&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;something&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;something&amp;lt;/span&amp;gt;{}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;something&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Cost&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;calcCost&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;weights&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;something&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Stop&amp;lt;/span&amp;gt;() {&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;calcCost&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;[]) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;减少嵌套&amp;#34;&amp;gt;减少嵌套&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;代码应该通过尽可能地先处理错误情况/特殊情况，并且及早返回或继续下一循环来减少嵌套。尽量减少嵌套于多个级别的代码数量。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;F1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;process&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Call&amp;lt;/span&amp;gt;(); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Send&amp;lt;/span&amp;gt;()
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Printf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Invalid v: %v&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;F1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Printf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Invalid v: %v&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;continue&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;process&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Call&amp;lt;/span&amp;gt;(); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Send&amp;lt;/span&amp;gt;()
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;不必要的-else&amp;#34;&amp;gt;不必要的 else&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;如果一个变量在 if 的两个分支中都设置了，那应该使用单个 if 。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;100&amp;lt;/span&amp;gt;
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;10&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;10&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;100&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;全局变量声明&amp;#34;&amp;gt;全局变量声明&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;在顶层使用标准 var 关键字声明变量时，不要显式指定类型，除非它与表达式的返回类型不同。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;F&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;F&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;A&amp;amp;#34;&amp;lt;/span&amp;gt; }
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_s&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;F&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// F 已经明确声明返回一个字符串类型，我们没有必要显式指定 _s 的类型
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;F&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;A&amp;amp;#34;&amp;lt;/span&amp;gt; }
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;如果表达式的返回类型与所需的类型不完全匹配，请显示指定类型。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;myError&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;myError&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Error&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;error&amp;amp;#34;&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;F&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;myError&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;myError&amp;lt;/span&amp;gt;{} }
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_e&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;F&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// F 返回一个 myError 类型的实例，但是我们要 error 类型
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;非导出的全局变量或者常量以-_-开头&amp;#34;&amp;gt;非导出的全局变量或者常量以 _ 开头&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;非导出的全局变量和常量前面加上前缀 &amp;lt;code&amp;gt;_&amp;lt;/code&amp;gt;，以明确表示它们是全局符号。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;例外：未导出的错误类型变量，应以 &amp;lt;code&amp;gt;err&amp;lt;/code&amp;gt; 开头。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;解释：顶级（全局）变量和常量具有包范围作用域。使用通用名称命名，可能在其他文件中不经意间地使用一个错误值。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// foo.go
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;defaultPort&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;8080&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;defaultUser&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;user&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// bar.go
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Bar&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;defaultPort&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;9090&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Default port&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;defaultPort&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// We will not see a compile error if the first line of
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Bar() is deleted.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// foo.go
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_defaultPort&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;8080&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_defaultUser&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;user&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;结构体中的嵌入类型&amp;#34;&amp;gt;结构体中的嵌入类型&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;嵌入式类型（例如 mutex ）应该放置在结构体字段列表的顶部，并且必须以空行与常规字段隔开。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Client&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;version&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;http&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Client&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Client&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;http&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Client&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;version&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;使用字段名来初始化结构&amp;#34;&amp;gt;使用字段名来初始化结构&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;初始化结构体时，必须指定字段名称。&amp;lt;code&amp;gt;go vet&amp;lt;/code&amp;gt; 强制执行。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;k&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;User&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;John&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Doe&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;k&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;User&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;FirstName&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;John&amp;amp;#34;&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LastName&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Doe&amp;amp;#34;&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Admin&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;,
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;例外：在测试文件中，如果结构体只有3个或更少的字段，则可以省略字段名称。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tests&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{
}{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;op&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Operation&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;want&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
}{
{&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Add&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;add&amp;amp;#34;&amp;lt;/span&amp;gt;},
{&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Subtract&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;subtract&amp;amp;#34;&amp;lt;/span&amp;gt;},
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;局部变量声明&amp;#34;&amp;gt;局部变量声明&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;如果声明局部变量时需要明确设值，应使用短变量声明形式（:=）。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;foo&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;foo&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;但是，在某些情况下，使用 var 关键字声明变量，默认的初始化值会更清晰。例如，声明空切片。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;list&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;filtered&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;list&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;10&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;filtered&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;filtered&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;)
}
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;list&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;filtered&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;list&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;10&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;filtered&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;filtered&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;)
}
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;nil是一个有效的slice&amp;#34;&amp;gt;nil是一个有效的slice&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;nil 是一个有效的长度为 0 的 slice，这意味着：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;不应明确返回长度为零的切片，而应该直接返回 nil 。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;x&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;&amp;amp;#34;&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;{}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;x&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;&amp;amp;#34;&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;若要检查切片是否为空，始终使用 &amp;lt;code&amp;gt;len(s) == 0&amp;lt;/code&amp;gt; ，不要与 nil 比较来检查。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;isEmpty&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;isEmpty&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;零值切片（通过 var 声明的切片）可直接使用，无需调用 make 创建。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nums&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// or, nums := make([]int)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;add1&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nums&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nums&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;add2&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nums&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nums&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nums&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;add1&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nums&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nums&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;add2&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nums&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nums&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3 id=&amp;#34;缩小变量作用域&amp;#34;&amp;gt;缩小变量作用域&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;如果有可能，尽量缩小变量作用范围，除非这样与减少嵌套的规则冲突。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ioutil&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;WriteFile&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;name&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0644&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ioutil&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;WriteFile&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;name&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0644&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;如果需要在 if 之外使用函数调用的结果，则不应尝试缩小范围。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ioutil&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ReadFile&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;name&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;cfg&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Decode&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;cfg&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ioutil&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ReadFile&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;name&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;cfg&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Decode&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;cfg&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;避免裸参数&amp;#34;&amp;gt;避免裸参数&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;函数调用中的裸参数可能会降低代码可读性。所以当参数名称的含义不明显时，请为参数添加 C 样式的注释（/* … */）。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// func printInfo(name string, isLocal, done bool)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;printInfo&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;foo&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// func printInfo(name string, isLocal, done bool)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;printInfo&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;foo&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;/* isLocal */&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;/* done */&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;上面更好的作法是将 bool 类型替换为自定义类型，从而使代码更易读且类型安全。将来需要拓展时，该参数也可以不止两个状态（true/false）。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Region&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;UnknownRegion&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Region&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;iota&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Local&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Status&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;StatusReady&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;iota&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;StatusDone&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 也许将来我们会有 StatusInProgress。
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;printInfo&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;name&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;region&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Region&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;status&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Status&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;使用原始字符串字面值避免使用转义&amp;#34;&amp;gt;使用原始字符串字面值，避免使用转义&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Go 支持原始字符串字面值，可以多行并包含引号。使用它可以避免使用肉眼阅读较为困难的手工转义的字符串。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantError&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;unknown name:\&amp;amp;#34;test\&amp;amp;#34;&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantError&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;`unknown error:&amp;amp;#34;test&amp;amp;#34;`&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;初始化结构体引用&amp;#34;&amp;gt;初始化结构体引用&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;在初始化结构引用时，使用 &amp;lt;code&amp;gt;&amp;amp;amp;T{}&amp;lt;/code&amp;gt; 而非 &amp;lt;code&amp;gt;new(T)&amp;lt;/code&amp;gt;，以使其与结构体初始化方式保持一致。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sval&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;T&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Name&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;foo&amp;amp;#34;&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 定义方式不一致
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sptr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; new(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;T&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sptr&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Name&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;bar&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sval&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;T&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Name&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;foo&amp;amp;#34;&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sptr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;T&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Name&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;bar&amp;amp;#34;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;格式化字符串放在-printf-外部&amp;#34;&amp;gt;格式化字符串放在 Printf 外部&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;如果为 Printf-style 函数声明格式化字符串，将格式化字符串放在函数外面 ，并将其设置为 const 常量。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;这有助于 &amp;lt;code&amp;gt;go vet&amp;lt;/code&amp;gt; 对格式字符串进行静态分析。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;msg&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;unexpected values %v, %v\n&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Printf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;msg&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;msg&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;unexpected values %v, %v\n&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Printf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;msg&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;h3 id=&amp;#34;为-printf-样式函数命名&amp;#34;&amp;gt;为 Printf 样式函数命名&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;声明 Printf-style 函数时，请确保 &amp;lt;code&amp;gt;go vet&amp;lt;/code&amp;gt; 可以检查它的格式化字符串。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;这意味着应尽可能使用预定义的 Printf-style 函数名称。&amp;lt;code&amp;gt;go vet&amp;lt;/code&amp;gt; 默认会检查它们。更多相关信息，请参见 &amp;lt;a href=&amp;#34;https://golang.org/cmd/vet/#hdr-Printf_family&amp;#34;&amp;gt;Printf系列&amp;lt;/a&amp;gt;。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;如果不能使用预定义的名称，请以 f 结尾：Wrapf，而非 Wrap。因为 &amp;lt;code&amp;gt;go vet&amp;lt;/code&amp;gt; 可以指定检查特定的 Printf 样式名称，但名称必须以 f 结尾。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-shell&amp;#34; data-lang=&amp;#34;shell&amp;#34;&amp;gt;$ go vet -printfuncs&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;wrapf,statusf
...
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;另见 &amp;lt;a href=&amp;#34;https://kuzminva.wordpress.com/2017/11/07/go-vet-printf-family-check/&amp;#34;&amp;gt;go vet: Printf family check&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;模式&amp;#34;&amp;gt;模式&amp;lt;/h2&amp;gt;
&amp;lt;h3 id=&amp;#34;测试表&amp;#34;&amp;gt;测试表&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;在核心测试逻辑重复时，将表驱动测试与子测试一起使用，以避免重复代码。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// func TestSplitHostPort(t *testing.T)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;host&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SplitHostPort&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;192.0.2.0:8000&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;require&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NoError&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;assert&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Equal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;192.0.2.0&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;host&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;assert&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Equal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;8000&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;host&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SplitHostPort&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;192.0.2.0:http&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;require&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NoError&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;assert&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Equal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;192.0.2.0&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;host&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;assert&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Equal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;http&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;host&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SplitHostPort&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;:8000&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;require&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NoError&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;assert&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Equal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;host&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;assert&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Equal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;8000&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;host&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SplitHostPort&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;1:8&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;require&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NoError&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;assert&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Equal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;1&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;host&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;assert&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Equal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;8&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// func TestSplitHostPort(t *testing.T)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tests&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;give&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantHost&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantPort&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
}{
{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;give&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;192.0.2.0:8000&amp;amp;#34;&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantHost&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;192.0.2.0&amp;amp;#34;&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantPort&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;8000&amp;amp;#34;&amp;lt;/span&amp;gt;,
},
{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;give&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;192.0.2.0:http&amp;amp;#34;&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantHost&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;192.0.2.0&amp;amp;#34;&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantPort&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;http&amp;amp;#34;&amp;lt;/span&amp;gt;,
},
{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;give&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;:8000&amp;amp;#34;&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantHost&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;&amp;amp;#34;&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantPort&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;8000&amp;amp;#34;&amp;lt;/span&amp;gt;,
},
{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;give&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;1:8&amp;amp;#34;&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantHost&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;1&amp;amp;#34;&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantPort&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;8&amp;amp;#34;&amp;lt;/span&amp;gt;,
},
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tt&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tests&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Run&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;give&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;testing&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;T&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;host&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SplitHostPort&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;give&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;require&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NoError&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;assert&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Equal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantHost&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;host&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;assert&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Equal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantPort&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;)
})
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;测试表使得向错误消息注入上下文信息，减少重复的逻辑，添加新的测试用例变得更加容易。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;我们遵循这样的约定：将结构体切片称为 tests。 每个测试用例称为 tt 。此外，我们鼓励使用 give 和 want 前缀说明每个测试用例的输入和输出值。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tests&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;give&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantHost&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wantPort&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
}{
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// ...
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tt&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tests&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// ...
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;功能选项&amp;#34;&amp;gt;功能选项&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;功能选项是一种模式，声明一个不透明 Option 类型，该类型记录某些内部结构体的信息。您的函数接受这些不定数量的选项参数，并将选项参数上的信息作用于内部结构上。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;此模式可用于扩展构造函数和实现其他公共 API 中的可选参数，特别是这些参数已经有三个或者超过三个的情况下。&amp;lt;/p&amp;gt;
&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// package db
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connect&amp;lt;/span&amp;gt;(
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;timeout&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Duration&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;caching&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;,
) (&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// ...
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Timeout and caching must always be provided,
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// even if the user wants to use the default.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connect&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;DefaultTimeout&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;DefaultCaching&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connect&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;newTimeout&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;DefaultCaching&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connect&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;DefaultTimeout&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;/* caching */&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connect&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;newTimeout&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;/* caching */&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;options&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;timeout&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Duration&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;caching&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Option overrides behavior of Connect.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Option&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;apply&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;options&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;optionFunc&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;options&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;optionFunc&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;apply&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;options&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;WithTimeout&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Duration&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Option&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;optionFunc&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;options&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;timeout&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;
})
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;WithCaching&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;cache&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Option&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;optionFunc&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;options&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;caching&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;cache&amp;lt;/span&amp;gt;
})
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Connect creates a connection.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connect&amp;lt;/span&amp;gt;(
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Option&amp;lt;/span&amp;gt;,
) (&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;options&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;options&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;timeout&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;defaultTimeout&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;caching&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;defaultCaching&amp;lt;/span&amp;gt;,
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;apply&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;options&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// ...
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Options must be provided only if needed.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connect&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connect&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;WithTimeout&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;newTimeout&amp;lt;/span&amp;gt;))
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connect&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;WithCaching&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;))
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connect&amp;lt;/span&amp;gt;(
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;WithCaching&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;),
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;db&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;WithTimeout&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;newTimeout&amp;lt;/span&amp;gt;),
)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- raw HTML omitted --&amp;gt;
&amp;lt;p&amp;gt;另见，&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html&amp;#34;&amp;gt;Self-referential functions and the design of options&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis&amp;#34;&amp;gt;Functional options for friendly APIs&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;</description></item><item><title>Go 网络库并发吞吐量测试</title><link>https://blog.iofree.xyz/posts/open-source/gev-benchmark/</link><pubDate>Sun, 22 Sep 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/open-source/gev-benchmark/</guid><description>&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;https://github.com/Allenxuxu/gev&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;本文主要测试 &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt; 网络库和其他三方 Go 网络库以及标准库的吞吐量对比。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;测试对象&amp;#34;&amp;gt;测试对象&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt; ：一个轻量、快速的基于 Reactor 模式的非阻塞 TCP 网络库&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/eviop&amp;#34;&amp;gt;eviop&amp;lt;/a&amp;gt; ：evio 的优化版本&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/tidwall/evio&amp;#34;&amp;gt;evio&amp;lt;/a&amp;gt; ：Fast event-loop networking for Go&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/panjf2000/gnet&amp;#34;&amp;gt;gnet&amp;lt;/a&amp;gt; ：eviop 的网络模型替换版本&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;net 标准库&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;测试方法&amp;#34;&amp;gt;测试方法&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;采用陈硕测试 muduo 使用的 ping pong 协议来测试吞吐量。&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;简单地说，ping pong 协议是客户端和服务器都实现 echo 协议。当 TCP 连接建立时，客户端向服务器发送一些数据，服务器会 echo 回这些数据，然后客户端再 echo 回服务器。这些数据就会像乒乓球一样在客户端和服务器之间来回传送，直到有一方断开连接为止。这是用来测试吞吐量的常用办法。&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;测试的客户端代码： &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev/blob/master/benchmarks/client/main.go&amp;#34;&amp;gt;https://github.com/Allenxuxu/gev/blob/master/benchmarks/client/main.go&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;测试脚本：https://github.com/Allenxuxu/gev/blob/master/benchmarks/bench-pingpong.sh&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;主要做两项测试：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;单线程单个 work 协程测试，测试并发连接数为 10/100/1000/10000 时的吞吐量&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;4线程4个 work 协程测试，测试并发连接数为 10/100/1000/10000 时的吞吐量&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;所有测试中，ping pong 消息的大小均为 4096 bytes，客户端始终是4线程运行。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;测试结果&amp;#34;&amp;gt;测试结果&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://cdn.jsdelivr.net/gh/Allenxuxu/blog/img/image-20210424120537758.png&amp;#34; alt=&amp;#34;image-20210424120537758&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://cdn.jsdelivr.net/gh/Allenxuxu/blog/img/image-20210424120550089.png&amp;#34; alt=&amp;#34;image-20210424120550089&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;总结与思考&amp;#34;&amp;gt;总结与思考&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;无论是单线程，还是多线程模式下，gev 都比其他网络库吞吐量略高出一些。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 因为 epoll 使用一些 bug 和可优化之处，所以在 linux 环境中的吞吐量远不如优化版本 eviop 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;eviop 是我对 evio bug 修复和优化的版本，所以其性能也是比 evio 提升不少。我曾尝试在 eviop 中替换 evio 的网络模型（evio 利用 accpet 的惊群现象工作），但是因为其代码耦合度过高，修改成本过大，最终决定一边完善 eviop（维持网络模型不变）一边自己借鉴muduo 的网络模型重新撸一个新的 &amp;amp;ndash; gev 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;gnet 是研究了 eviop 的代码，继续在其之上替换网络模型的版本。但是网络模型的优势在单线程模式中并没有体现出来，吞吐量反而比 eviop 小一些。在多线程模式下，网络模型的优势得以体现。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;gev 与其他使用 epoll 构建的基于事件驱动的网络库在逐步的优化中，相信性能都差不多。因为作者目的不同，网络库不同的设计，优势点都会不同。我研究 evio，最终自己撸了 gev ，也是因为想要一个在内存占用低前提下，速度足够快，能负载更多连接的网络库。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;如果对 gev 网络库感兴趣，欢迎提意见和 PR 。➡️ &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;https://github.com/Allenxuxu/gev&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description></item><item><title>开源 gev: Go 实现基于 Reactor 模式的非阻塞 TCP 网络库</title><link>https://blog.iofree.xyz/posts/open-source/gev/</link><pubDate>Thu, 19 Sep 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/open-source/gev/</guid><description>&amp;lt;h1 id=&amp;#34;gevhttpsgithubcomallenxuxugev----轻量快速的-golang-网络库&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt; 轻量、快速的 Golang 网络库&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt; 是一个轻量、快速的基于 Reactor 模式的非阻塞 TCP 网络库，支持自定义协议，轻松快速搭建高性能服务器。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;为什么有-gev&amp;#34;&amp;gt;为什么有 gev&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Golang 的 goroutine 虽然非常轻量，但是每启动一个 goroutine 仍需要 4k 左右的内存。读了鸟窝大佬的文章【&amp;lt;a href=&amp;#34;https://colobu.com/2019/02/23/1m-go-tcp-connection/&amp;#34;&amp;gt;百万 Go TCP 连接的思考: epoll方式减少资源占用&amp;lt;/a&amp;gt;】后，便去研究了了下 &amp;lt;a href=&amp;#34;https://github.com/tidwall/evio&amp;#34;&amp;gt;evio&amp;lt;/a&amp;gt;。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 虽然非常快，但是仍然存在一些问题，便尝试去优化它，于是有了 &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/eviop&amp;#34;&amp;gt;eviop&amp;lt;/a&amp;gt; 项目。关于 evio 的问题可以看我的另一篇博文 【&amp;lt;a href=&amp;#34;https://hacpai.com/article/1565926947655&amp;#34;&amp;gt;Golang 网络库evio一些问题/bug和思考&amp;lt;/a&amp;gt;】。在优化 evio 完成 eviop 的过程中，因为其网络模型的缘故，愈加感觉修改它非常麻烦，成本比重新搞一个还高。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;最终决定自己重搞一个，更加轻量，不需要的全去掉。加上大学时学习过 &amp;lt;a href=&amp;#34;https://github.com/chenshuo/muduo&amp;#34;&amp;gt;muduo&amp;lt;/a&amp;gt; ，便参考 muduo 的使用的 Reactor 模型实现 gev 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;在 linux 环境下，gev 底层使用 epoll ，这是 gev 会专注优化的地方。在 mac 下底层使用 kqueue，可能不会过多关注这部分的优化，毕竟很少有用 mac 做服务器的（Windows 环境&amp;amp;quot;暂&amp;amp;quot;不支持）。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;特点&amp;#34;&amp;gt;特点&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;基于 epoll 和 kqueue 实现的高性能事件循环&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;支持多核多线程&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;动态扩容 Ring Buffer 实现的读写缓冲区&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;异步读写&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;SO_REUSEPORT 端口重用支持&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;支持 WebSocket&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;支持定时任务，延时任务&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;支持自定义协议，处理 TCP 粘包&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;网络模型&amp;#34;&amp;gt;网络模型&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;gev&amp;lt;/code&amp;gt; 只使用极少的 goroutine, 一个 goroutine 负责监听客户端连接，其他 goroutine （work 协程）负责处理已连接客户端的读写事件，work 协程数量可以配置，默认与运行主机 CPU 数量相同。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://img.hacpai.com/file/2019/09/image-38c61bae.png&amp;#34; alt=&amp;#34;image.png&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;性能测试&amp;#34;&amp;gt;性能测试&amp;lt;/h2&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;测试环境 Ubuntu18.04&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;gnet&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;eviop&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;evio&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;net (标准库)&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3 id=&amp;#34;吞吐量测试&amp;#34;&amp;gt;吞吐量测试&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://raw.githubusercontent.com/Allenxuxu/gev/master/benchmarks/out/gev11.png&amp;#34; alt=&amp;#34;null&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://raw.githubusercontent.com/Allenxuxu/gev/master/benchmarks/out/gev44.png&amp;#34; alt=&amp;#34;null&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;evio-压测方式&amp;#34;&amp;gt;evio 压测方式:&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;限制 GOMAXPROCS=1，1 个 work 协程&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://img.hacpai.com/file/2019/09/image-c3303366.png&amp;#34; alt=&amp;#34;image.png&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;限制 GOMAXPROCS=1，4 个 work 协程&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://img.hacpai.com/file/2019/09/image-6eb2e9a9.png&amp;#34; alt=&amp;#34;image.png&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;限制 GOMAXPROCS=4，4 个 work 协程&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://img.hacpai.com/file/2019/09/image-85dbdde8.png&amp;#34; alt=&amp;#34;image.png&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;</description></item><item><title>Go net/http 浅析</title><link>https://blog.iofree.xyz/posts/go/go-http/</link><pubDate>Sun, 15 Sep 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/go/go-http/</guid><description>&amp;lt;h1 id=&amp;#34;go-http-server&amp;#34;&amp;gt;GO HTTP Server&amp;lt;/h1&amp;gt;
&amp;lt;h2 id=&amp;#34;使用标准库构建-http-服务&amp;#34;&amp;gt;使用标准库构建 HTTP 服务&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Go 语言标准库自带一个完善的 net/http 包，可以很方便编写一个可以直接运行的 Web 服务。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;log&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;net/http&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;hello&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;http&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ResponseWriter&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;http&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Request&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Method&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Host&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RequestURI&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Write&amp;lt;/span&amp;gt;([]byte(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;hello&amp;amp;#34;&amp;lt;/span&amp;gt;))
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;http&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;HandleFunc&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;/hello&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;hello&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//设置访问的路由
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// http.Handle(&amp;amp;#34;/hello&amp;amp;#34;, http.HandlerFunc(hello)) // 和上面写法等价
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;http&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ListenAndServe&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;:9090&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//设置监听的端口并启动 HTTP 服务
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Fatal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;ListenAndServe: &amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;$ curl -v 127.0.0.1:9090/hello
* Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to 127.0.0.1 &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;(&amp;lt;/span&amp;gt;127.0.0.1&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;)&amp;lt;/span&amp;gt; port &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;9090&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;#0)&amp;lt;/span&amp;gt;
&amp;amp;gt; GET /hello HTTP/1.1
&amp;amp;gt; Host: 127.0.0.1:9090
&amp;amp;gt; User-Agent: curl/7.54.0
&amp;amp;gt; Accept: */*
&amp;amp;gt;
&amp;amp;lt; HTTP/1.1 &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;200&amp;lt;/span&amp;gt; OK
&amp;amp;lt; Date: Tue, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;10&amp;lt;/span&amp;gt; Sep &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2019&amp;lt;/span&amp;gt; 10:52:07 GMT
&amp;amp;lt; Content-Length: &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;5&amp;lt;/span&amp;gt;
&amp;amp;lt; Content-Type: text/plain; charset&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;utf-8
&amp;amp;lt;
* Connection &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;#0 to host 127.0.0.1 left intact&amp;lt;/span&amp;gt;
hello
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;上面短短几行代码，已经启动了一个 HTTP 服务。 在浏览输入 &amp;lt;code&amp;gt;127.0.0.1:9090/hello&amp;lt;/code&amp;gt; 或者执行 &amp;lt;code&amp;gt;curl -v 127.0.0.1:9090/hello&amp;lt;/code&amp;gt; 可以验证。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;HandleFunc&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pattern&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ResponseWriter&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Request&amp;lt;/span&amp;gt;)) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;DefaultServeMux&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;HandleFunc&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pattern&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;http.HandleFunc(&amp;amp;quot;/hello&amp;amp;quot;, hello)&amp;lt;/code&amp;gt; 会在 net/http 的默认路由中注册 hello 处理函数，这也是我们为什么在 &amp;lt;code&amp;gt;http.ListenAndServe(&amp;amp;quot;:9090&amp;amp;quot;, nil)&amp;lt;/code&amp;gt; 中传入 nil，传入 nil 意味着使用默认的路由器。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;上面的 main 函数和如下其实是一样的：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mux&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;http&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NewServeMux&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mux&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;HandleFunc&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;/hello&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;hello&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//设置访问的路由
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// mux.Handle(&amp;amp;#34;/hello&amp;amp;#34;, http.HandlerFunc(hello)) // 和上面的写法等价
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;http&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ListenAndServe&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;:9090&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mux&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//设置监听的端口并启动 HTTP 服务
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Fatal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;ListenAndServe: &amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Go 自带的 http.ServerMux 实现比较简单，只支持路径匹配，不支持按照 Method 等信息匹配，没法直接实现 RESTful 接口，所有有很多其他优秀的路由器和 HTTP 库实现，后面的文章中会介绍。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;go-nethttp-库浅析&amp;#34;&amp;gt;Go net/http 库浅析&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Go 的标准库 net/http 内部处理了 TCP 连接和 HTTP 报文解析的等繁琐的细节，仅仅对外提供 HTTP 处理的相关接口。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Handler&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ServeHTTP&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ResponseWriter&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Request&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;开发者只需实现对应的 Handler 接口并注册， 在处理函数中和 http.request 、 http.ResponseWriter 交互读取请求信息，设置返回信息即可，就像文章开头的例子那样。&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Request： 用户请求的信息，用来解析用户的请求信息，包括 post、get、cookie、url 等信息&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;ResponseWriter： 服务器需要返回给客户端的信息&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;mux.HandleFunc(&amp;amp;quot;/hello&amp;amp;quot;, hello)&amp;lt;/code&amp;gt; 第一个参数是 URL 路径，第二个参数就是设置的 Handler。这里 net/http 做了一个适配器，让我们可以不用每次都定义一个结构体去实现 &amp;lt;code&amp;gt;ServeHTTP(ResponseWriter, *Request)&amp;lt;/code&amp;gt; 。
第二个参数传入一个函数，并其函数签名为 &amp;lt;code&amp;gt;func(ResponseWriter, *Request)&amp;lt;/code&amp;gt;，内部通过适配器将其封装，主要代码如下：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// HandleFunc registers the handler function for the given pattern.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mux&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ServeMux&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;HandleFunc&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pattern&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ResponseWriter&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Request&amp;lt;/span&amp;gt;)) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
panic(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;http: nil handler&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mux&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Handle&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pattern&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;HandlerFunc&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt;))
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// The HandlerFunc type is an adapter to allow the use of
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// ordinary functions as HTTP handlers. If f is a function
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// with the appropriate signature, HandlerFunc(f) is a
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Handler that calls f.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;HandlerFunc&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ResponseWriter&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Request&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// ServeHTTP calls f(w, r).
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;HandlerFunc&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ServeHTTP&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ResponseWriter&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Request&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Handler&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ServeHTTP&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ResponseWriter&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Request&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;net/http 库中会去调用 ServeHTTP 方法，这也是接口规定我们实现的方法。HandlerFunc 适配器封装了它，在其内部调用我们传入的函数 &amp;lt;code&amp;gt;f(w, r)&amp;lt;/code&amp;gt; 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;我们一步步查看最后启动 Web 服务的 &amp;lt;code&amp;gt;ListenAndServe&amp;lt;/code&amp;gt; 实现：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ListenAndServe&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Handler&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Server&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Addr&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Handler&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ListenAndServe&amp;lt;/span&amp;gt;()
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Server&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ListenAndServe&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;shuttingDown&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ErrServerClosed&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Addr&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;&amp;amp;#34;&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;:http&amp;amp;#34;&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Listen&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;tcp&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//创建一个 TCP listener
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tcpKeepAliveListener&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TCPListener&amp;lt;/span&amp;gt;)})
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;上面两层封装，主要是保存了 HTTP Server 的运行参数，并且创建了 TCP Listener ，最后 Serve 方法会进入真正的循环。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Server&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Listener&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fn&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;testHookServerServe&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fn&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// call hook with unwrapped listener
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;onceCloseListener&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Listener&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Close&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;setupHTTP2_Serve&amp;lt;/span&amp;gt;(); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; !&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trackListener&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ErrServerClosed&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trackListener&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tempDelay&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Duration&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// how long to sleep on accept failure
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;baseCtx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;context&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Background&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// base is always background, per Issue 16220
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ctx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;context&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;WithValue&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;baseCtx&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ServerContextKey&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 死循环，不断接受客户端连接处理
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;rw&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;e&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Accept&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 接受客户端连接
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;e&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;select&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;getDoneChan&amp;lt;/span&amp;gt;():
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ErrServerClosed&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ne&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;e&amp;lt;/span&amp;gt;.(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Error&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;amp;amp;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ne&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Temporary&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tempDelay&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tempDelay&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;5&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Millisecond&amp;lt;/span&amp;gt;
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tempDelay&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;max&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tempDelay&amp;lt;/span&amp;gt; &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;max&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tempDelay&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;max&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;logf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;http: Accept error: %v; retrying in %v&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;e&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tempDelay&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tempDelay&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;continue&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;e&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tempDelay&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;newConn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;rw&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;setState&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;rwc&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;StateNew&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// before Serve can return
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ctx&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 启动一个协程来执行处理逻辑
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;这个函数内部有一个无限循环会不断接受新的客户断连接，并且启动一个协程来处理它。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;serve&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;readRequest&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lr&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;N&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;initialLimitedReaderSize&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// If we read any bytes off the wire, we&amp;amp;#39;re active.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;setState&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;rwc&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;StateActive&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// HTTP cannot have multiple simultaneous active requests.[*]
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Until the server replies to this request, it can&amp;amp;#39;t read another,
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// so we might as well run the handler in this goroutine.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// [*] Not strictly true: HTTP pipelining. We could let them all process
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// in parallel even if their responses need to be serialized.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;serverHandler&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;}.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ServeHTTP&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;req&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;finishRequest&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;closeAfterReply&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;requestBodyLimitHit&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;closeWriteAndWait&amp;lt;/span&amp;gt;()
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;break&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;setState&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;rwc&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;StateIdle&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;对客户端的请求处理，会执行 &amp;lt;code&amp;gt;serverHandler{c.server}.ServeHTTP(w, w.req)&amp;lt;/code&amp;gt; ，这里面会调用我们注册的路由器 ServeHTTP 方法，继而根据路由判断，调用我们注册的 Handler 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sh&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;serverHandler&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ServeHTTP&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;rw&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ResponseWriter&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;req&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Request&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sh&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Handler&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;DefaultServeMux&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;req&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RequestURI&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;*&amp;amp;#34;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;amp;amp;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;req&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Method&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;OPTIONS&amp;amp;#34;&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;globalOptionsHandler&amp;lt;/span&amp;gt;{}
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ServeHTTP&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;rw&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;req&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;接下来我们看看默认的路由器 &amp;lt;code&amp;gt;ServeMux&amp;lt;/code&amp;gt; 的实现 ：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ServeMux&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mu&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sync&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RWMutex&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;m&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;muxEntry&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;es&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;muxEntry&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// slice of entries sorted from longest to shortest.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;hosts&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// whether any patterns contain hostnames
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;muxEntry&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;h&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Handler&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pattern&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;内部通过一个 map 来实现路由映射，这也是它只支持路径匹配，不支持按照 Method 等信息匹配的原因。我们知道在对客户端的请求处理中会首先调用其 &amp;lt;code&amp;gt;ServeHTTP&amp;lt;/code&amp;gt; 方法，我们先来看看其实现：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mux&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ServeMux&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ServeHTTP&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ResponseWriter&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Request&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RequestURI&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;*&amp;amp;#34;&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ProtoAtLeast&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Header&amp;lt;/span&amp;gt;().&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Set&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Connection&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;close&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;WriteHeader&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;StatusBadRequest&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;h&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mux&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Handler&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;h&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ServeHTTP&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;w&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;这个函数非常短小，主要是首先执行 &amp;lt;code&amp;gt;h, _ := mux.Handler(r)&amp;lt;/code&amp;gt; 来匹配路由，然后再调用其 ServeHTTP，也就是我们注册的 Handler。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mux&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ServeMux&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Handler&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Request&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;h&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Handler&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pattern&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// CONNECT requests are not canonicalized.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Method&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;CONNECT&amp;amp;#34;&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// If r.URL.Path is /tree and its handler is not registered,
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// the /tree -&amp;amp;gt; /tree/ redirect applies to CONNECT requests
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// but the path canonicalization does not.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;u&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mux&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;redirectToPathSlash&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;URL&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Host&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;URL&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Path&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;URL&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RedirectHandler&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;u&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;String&amp;lt;/span&amp;gt;(), &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;StatusMovedPermanently&amp;lt;/span&amp;gt;), &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;u&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Path&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mux&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Host&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;URL&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Path&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// All other requests have any port stripped and path cleaned
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// before passing to mux.handler.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;host&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stripHostPort&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Host&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;path&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;cleanPath&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;URL&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Path&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// If the given path is /tree and its handler is not registered,
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// redirect for /tree/.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;u&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mux&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;redirectToPathSlash&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;host&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;path&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;URL&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RedirectHandler&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;u&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;String&amp;lt;/span&amp;gt;(), &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;StatusMovedPermanently&amp;lt;/span&amp;gt;), &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;u&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Path&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;path&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;URL&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Path&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pattern&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mux&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;host&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;path&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;url&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;URL&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;url&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Path&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;path&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RedirectHandler&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;url&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;String&amp;lt;/span&amp;gt;(), &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;StatusMovedPermanently&amp;lt;/span&amp;gt;), &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pattern&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mux&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;host&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;URL&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Path&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;ServeMux 的 Handler 方法内部主要就是根据用户请求的 URL 来找到其对应的 Handler ，也就是 &amp;lt;code&amp;gt;mux.HandleFunc(&amp;amp;quot;/hello&amp;amp;quot;, hello)&amp;lt;/code&amp;gt; 中注册的路由和 Handler 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;我们梳理一下 Go Web 的主要执行流程：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;启动 TCP Server 监听指定端口，等待客户端连接&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;接受客户端连接，并启动一个协程单独处理客户端逻辑&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;在新启动的协程中，默认路由器根据 URL 匹配对应的用户处理函数并执行&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;接下来，我们看下业务开发时接触最多的 Request 和 ResponseWriter 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Request&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Method&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;URL&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;url&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;URL&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Proto&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// &amp;amp;#34;HTTP/1.0&amp;amp;#34;
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ProtoMajor&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 1
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ProtoMinor&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 0
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Header&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Header&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Body&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;io&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ReadCloser&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;GetBody&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;() (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;io&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ReadCloser&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ContentLength&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int64&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TransferEncoding&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Close&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Host&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Form&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;url&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Values&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;PostForm&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;url&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Values&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;MultipartForm&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;multipart&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Form&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trailer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Header&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RemoteAddr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RequestURI&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TLS&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tls&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ConnectionState&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Cancel&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Response&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Response&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ctx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;context&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Context&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;从 Request 结构体中，可以看出，我们在 Handler 需要的 HTTP 请求相关信息都在这个结构体中，在实际开发中通过 Request 的公开方法或者直接读取公开变量获取。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ResponseWriter&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Header&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Header&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Write&amp;lt;/span&amp;gt;([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;WriteHeader&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;statusCode&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;ResponseWriter 的实现更加简洁，主要就是通过 Header 来设置返回头，Write 来设置返回 body ，WriteHeader 来设置返回状态码。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;关于 Request 和 ResponseWriter 更多的使用方法这里就不细说，可以查阅其他相关资料。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;至此，我们已经大概清楚 net/http 的大概工作流程了。得益于 Go 协程的轻量，net/http 库采用 per request per goroutine ，这使得 Go 的 HTTP 请求处理非常快速。同时 net/http 内部封装大量细节，让开发者通过简单的 API 调用就可以搭建 HTTP 服务。&amp;lt;/p&amp;gt;</description></item><item><title>Go channel 拷贝问题</title><link>https://blog.iofree.xyz/posts/go/go-channel-copy/</link><pubDate>Wed, 21 Aug 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/go/go-channel-copy/</guid><description>&amp;lt;p&amp;gt;Go 的 channel 使用非常方便，但是总听说 channel 会拷贝传递的数据，生怕频繁拷贝影响效率。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;究竟是怎么个拷贝法呢，下面会有两个 demo 验证下。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;先说结论&amp;lt;/strong&amp;gt;：
Go channel 的发送接收数据的拷贝和 Go 的函数传参道理是一样的，都是默认的值拷贝。
如果你传递一个值，那么 Go 会复制一份新的；如果传递一个指针，则会拷贝这个指针，不会去拷贝这个指针所指的变量（这一点 C++ 选手可能会理解比较深）。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;所以，如果你需要通过 channel 传递一个很大的 struct ，那么应该传递 指针。但是，要非常注意通过 channel 发送后，不要修改这个指，这会导致线程间潜在的竞争。&amp;lt;/p&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;p&amp;gt;下面是两个验证的小 demo：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;通过 channel 传递指针&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;time&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;recv&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;recv : &amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;i : &amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;recv&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;i : &amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;输出：&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;i : 0xc000084000 1
recv : 0xc000084000 2
i : 0xc000084000 2
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;上面的代码通过 channel 发送了 *int 的数据，在接收的协程中先 sleep 1 秒钟让别的协程去更改传递的值。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;从打印结果可以看出，通过 channel 接收的数据，只是拷贝了对象的地址而已。&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;通过 channel 传递值&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;time&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;recv&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;recv : &amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;i : &amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;recv&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;i : &amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;输出：&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;i : 0xc00008e000 1
recv : 0xc00007e008 1
i : 0xc00008e000 2
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;</description></item><item><title>拥抱 Go module</title><link>https://blog.iofree.xyz/posts/go/go-module/</link><pubDate>Tue, 20 Aug 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/go/go-module/</guid><description>&amp;lt;p&amp;gt;go get 拉包一直时国内选手头疼的问题，虽然梯子可以解决问题，但是总是有很慢的时候，而且需要每台电脑都配置，特别是 CI 的服务器等，很烦人。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;七牛云开源了 goproxy ，还免费提供 &amp;lt;a href=&amp;#34;https://goproxy.cn&amp;#34;&amp;gt;https://goproxy.cn&amp;lt;/a&amp;gt; 作为代理来拉包。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;不过 GOPROXY 只有在 Go module 下才能使用，索性全面拥抱 Go module 一劳永逸。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;修改一下配置文件，即可：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;sudo vi /etc/profile
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;在最后添加如下内容，开启 Go module 和代理：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;export GO111MODULE&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;on
export GOPROXY&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;https://goproxy.cn
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;让配置文件立即生效&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;source /etc/profile
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;接下来就可以畅快 Go 了！&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;PS： Go 1.16 已经默认开启 go moudle了。&amp;lt;/p&amp;gt;</description></item><item><title>Golang 网络库 evio 一些问题/bug和思考</title><link>https://blog.iofree.xyz/posts/open-source/evio-code-bug/</link><pubDate>Thu, 15 Aug 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/open-source/evio-code-bug/</guid><description>&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Fast event-loop networking for Go&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;最近翻了 evio 的源码，发现一些问题，主要集中在 linux 平台 epoll 上和读写的处理。&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;用来唤醒 epoll 的 eventfd 写入数据没有读出&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;listen 的 fd 注册到所有事件循环，epoll 的惊群问题&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;loopWrite 在内核缓冲区满，无法一次写入时，出现写入数据丢失&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;eventfd-的使用问题&amp;#34;&amp;gt;eventfd 的使用问题&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;在 internal/internal_linux.go 中封装了 epoll 的使用 API 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Poll ...
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// epoll fd
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// wake fd
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;noteQueue&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;在 OpenPoll 时，会创建一个 eventfd 并将 fd 赋值给 Poll 的 wfd 成员， 并且注册到 epoll 监听可读事件。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当需要唤醒当前 epoll 时，提供了 Trigger 方法&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Trigger ...
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trigger&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Add&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Write&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt;, []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;})
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;这是往刚刚提到的 eventfd 中写入八字节数据，此时 epol l会被唤醒 epoll_wait 函数返回。 但是，evio 并没有去把 8 个字节的数据读取出来，内核缓冲区会不断积压，并且 evio 使用的是 epoll 的LT模式（默认模式），只要缓冲区中有数据，epoll 就会不断唤醒。这应该算是一个 bug 吧。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;listen-的-fd-注册到所有事件循环epoll-的惊群问题&amp;#34;&amp;gt;listen 的 fd 注册到所有事件循环，epoll 的惊群问题&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;evio 可以指定启动多个事件循环。evio 将 listen fd 注册到每一个事件循环中（epoll）监听可读事件，所以当一个连接到来时，所有的事件循环都会唤醒。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// create loops locally and bind the listeners.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;internal&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;OpenPoll&amp;lt;/span&amp;gt;(),
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;packet&amp;lt;/span&amp;gt;: make([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0xFFFF&amp;lt;/span&amp;gt;),
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt;: make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;),
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listeners&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;AddRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// start loops in background
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wg&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Add&amp;lt;/span&amp;gt;(len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;))
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopRun&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;这并不是一个 bug ，因为最终只有一个线程可以accept调用返回成功，其他线程（协程）的accept函数调用返回EAGAIN错误 ，作者也做出了处理。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nfd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sa&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Accept&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EAGAIN&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;并且作者还利用每个事件循环都会被唤醒，来做客户端连接的负载均衡策略。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;LeastConnections : 当存在其他事件循环的注册的客户端连接数比当前事件循环的连接数少的时候，直接 return nil 。当有两个最下连接数相同的时候，也没关系，因为 accept 会保证只有一个可以成功。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;RoundRobin： 原理也是一样，每个事件循环都会去判断 int(atomic.LoadUintptr(&amp;amp;amp;s.accepted)) % len(s.loops) ，轮到自己了，才继续执行，否则 return nil 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;balance&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LeastConnections&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LoadInt32&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lp&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lp&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LoadInt32&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lp&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;) &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do not accept
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RoundRobin&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LoadUintptr&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;accepted&amp;lt;/span&amp;gt;)) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;%&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do not accept
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;AddUintptr&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;accepted&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;这样的做法没有问题，但是个人觉得 muduo 的做法似乎更好。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;loopwrite-在内核缓冲区满无法一次写入时出现写入数据丢失&amp;#34;&amp;gt;loopWrite 在内核缓冲区满，无法一次写入时，出现写入数据丢失&amp;lt;/h2&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopWrite&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;PreWrite&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;PreWrite&amp;lt;/span&amp;gt;()
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Write&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EAGAIN&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopCloseConn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;:]
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;amp;amp;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ModRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;当内核缓冲区满时， syscall.Write(c.fd, c.out) 会无法全部写入，可以通过返回值得到已经写入的个数。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;:]
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;作者也做出了处理，判断了 返回值 n 不是 c.out 长度的情况，c.out = c.out[n:] 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;但是作者并没有去注册 epoll 可写事件啊。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;在当前文件搜索 ModReadWrite ，注册可读可写的事件，共有两处。一次是 loopWake 函数，一次是在 loopRead 函数。会不会作者在 loopRead 方法中了做了处理，规避了没有注册可写事件这种情况呢？&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;我们看下 loopRead&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Read&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;packet&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;||&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EAGAIN&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopCloseConn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;packet&amp;lt;/span&amp;gt;[:&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;]
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; !&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuse&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; = append([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Data&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = append([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;||&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ModReadWrite&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;果然，作者做了处理！ 当 s.events.Data(c, in) 函数返回，如果 c.out 有数据，就注册可读可写事件。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;所以，执行的流程是：&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;客户端有数据到来，loopRead 函数执行&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;调用客户注册的回调函数 events.Data 函数，客户将需要的写入给客户端的数据返回，evio 将需要写给客户端数据存到 c.out , 然后监听可读可写事件&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;eopll 可写事件唤醒，执行 loopWrite 直接 write 数据。 如果写完就重新注册，只注册可读事件；如果没写完，就不重新注册，还是可读可写事件都监听&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;当缓冲区有空间了时，epoll 又会唤醒继续 loopWrite 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;似乎没问题，但是仔细想一想，会不会有这种情况呢：&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;内核的缓冲区满了，第一次没写完，等待缓冲区可写。此时客户端又来了数据，继续执行 loopRead 。调用用户回调函数，又有要写入的数据。这是来看看处理逻辑&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Data&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = append([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;c.out = append([]byte{}, out&amp;amp;hellip;) 这里，之前没写完存在 c.out 里的数据直接被清空了啊。这样要写入的数据就丢失了一部分啊。&amp;lt;/p&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;h2 id=&amp;#34;思考&amp;#34;&amp;gt;思考&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;evio 速度非常快，但是翻了源码，发现 evio 并没有刻意去减少 epoll 的唤醒次数，相反 evio 利用 epoll 的多次唤醒去做操作。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;比如，调用客户回调后，并没有直接处理 action 的状态，反而是先把 action 存起来，增加注册 fd 的可写事件，让epoll 再唤醒，在 loopAction 中再来处理 action。先不说这样会不会有问题，这样让 epoll 频繁唤醒似乎不妥。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 的处理 read 和 write 的方式，也导致多次的内存拷贝，换种方式，性能还可以再次提升。evio 在 linux 环境（epoll）下，单元测试因为 &amp;lt;code&amp;gt;用来唤醒 epoll 的 eventfd 写入数据没有读出&amp;lt;/code&amp;gt; 这个bug ，单元测试并不能通过。在 ubuntu 环境下跑 evio 的压测，显示性能并没有 stdlib 好。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 非常轻量，这也说明它非常简单，使用起来还是非常不方便，并且对于 epoll 的处理还有很多可以优化的地方。而且，作者似乎很忙。。。 PR也不理，Issues 也不理。所以决定自己撸一个了，更好用，更快速：&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/eviop/&amp;#34;&amp;gt;eviop&amp;lt;/a&amp;gt; 。eviop 是想优化 evio ，但是由于 evio 的代码耦合性问题，举步维艰，所以干脆全部重写，撸了 &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt;。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;推荐库&amp;#34;&amp;gt;推荐库&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt; 一个轻量、快速的基于 Reactor 模式的非阻塞 TCP 网络库。&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;</description></item><item><title>Golang 高性能网络库 evio 源码解析</title><link>https://blog.iofree.xyz/posts/open-source/evio-code/</link><pubDate>Tue, 06 Aug 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/open-source/evio-code/</guid><description>&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;阅读前提：了解 epoll&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/tidwall/evio&amp;#34;&amp;gt;evio&amp;lt;/a&amp;gt; 是一个基于事件驱动的网络框架，它非常轻量而且相比 Go net 标准库更快。其底层使用epoll 和 kqueue 系统调度实现。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://cdn.jsdelivr.net/gh/Allenxuxu/blog/img/echo.png&amp;#34; alt=&amp;#34;echo.png&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;h2 id=&amp;#34;原理&amp;#34;&amp;gt;原理&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;evio 是 Reactor 模式的简单实现。Reactor 本质就是“non-blocking IO + IO multiplexing”，通过非阻塞IO+ IO 多路复用来处理并发。程序运行一个或者多个事件循环，通过在事件循环中注册回调的方式实现业务逻辑。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 将所有文件描述符设为非阻塞，并注册到事件循环（ epoll / kqueue ）中。相较于传统的 per thread per connection 的处理方法，线程使用更少，线程资源利用率更高。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 需要在服务启动前，注册回调函数，当事件循环中有事件到来时，会调用回调函数处理。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;使用示例&amp;#34;&amp;gt;使用示例&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;先从一个简单的 echo server 的例子来了解 evio 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;flag&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;log&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;strings&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/tidwall/evio&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;udp&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trace&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuseport&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;IntVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;port&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;5000&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;server port&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;BoolVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;udp&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;udp&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;listen on udp&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;BoolVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuseport&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;reuseport&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;reuseport (SO_REUSEPORT)&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;BoolVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trace&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;trace&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;print packets to console&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;IntVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;loops&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;num loops&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;BoolVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;stdlib&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;use stdlib&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Parse&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;evio&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Events&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NumLoops&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serving&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;evio&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Server&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;evio&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Action&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Printf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;echo server started on port %d (loops: %d)&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NumLoops&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuseport&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Printf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;reuseport&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Printf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;stdlib&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Data&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;evio&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Conn&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;evio&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Action&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trace&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Printf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;%s&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;strings&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TrimSpace&amp;lt;/span&amp;gt;(string(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt;)))
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;scheme&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;tcp&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;udp&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;scheme&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;udp&amp;amp;#34;&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;scheme&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;-net&amp;amp;#34;&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Fatal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;evio&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sprintf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;%s://:%d?reuseport=%t&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;scheme&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuseport&amp;lt;/span&amp;gt;)))
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;上面的例子主要就是注册了两个回调函数： events.Serving 和 events.Data 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当 server 启动时，会来执行注册的 events.Serving 回调函数；
当有数据到来时，执行 events.Data 回调函数。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;程序最后调用 evio.Serve 方法开启事件循环，程序在此处不断循环检测是否有事件发生并处理（有数据到来，有数据要发送&amp;amp;hellip;)。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 都是通过回调函数来执行业务逻辑的。 当客户端有数据发送过来时，调用用户注册的 events.Data 函数。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;需要发送数据给客户端时，只可以通过注册的回调函数的返回值来返回，evio 框架来负责发送（有bug）。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;回调函数的返回值主要有两个 &amp;lt;code&amp;gt;out []byte, action evio.Action&amp;lt;/code&amp;gt; , out 就是需要发送给客户端的， Action 就是返回一些状态，用来关闭连接，或者服务器退出啥的操作。主要状态如下：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// None indicates that no action should occur following an event.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Action&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;iota&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Detach detaches a connection. Not available for UDP connections.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Detach&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Close closes the connection.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Close&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Shutdown shutdowns the server.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Shutdown&amp;lt;/span&amp;gt;
)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;evio-的事件循环&amp;#34;&amp;gt;evio 的事件循环&amp;lt;/h2&amp;gt;
&amp;lt;h3 id=&amp;#34;evioserve&amp;#34;&amp;gt;evio.Serve&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;我们先来看下 evio.Serve 方法的实现&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listener&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 这个函数如果推出，需要关闭所有 listener
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.close()
}
}()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 可以选择使用 stdlib（stdlib 主要是为了支持 非 *unix 平台）
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 生成 listener
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listener&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlibt&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;network&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlibt&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;parseAddr&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlibt&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;network&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;unix&amp;amp;#34;&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;os&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RemoveAll&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;network&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;udp&amp;amp;#34;&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reusePort&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pconn&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuseportListenPacket&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;network&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;)
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pconn&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ListenPacket&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;network&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;)
}
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reusePort&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuseportListen&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;network&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;)
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Listen&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;network&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pconn&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnaddr&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pconn&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LocalAddr&amp;lt;/span&amp;gt;()
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnaddr&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Addr&amp;lt;/span&amp;gt;()
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; !&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;system&amp;lt;/span&amp;gt;(); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdserve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 使用 std net 库 启动server
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 使用 epoll or kqueue 启动server
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;从 Serve 函数签名中可以看出 evio 是支持绑定多地址监听的&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;使用方式如下：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;evio&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;tcp://localhost:5000&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;tcp://192.168.0.10:5001&amp;amp;#34;&amp;lt;/span&amp;gt;);
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;现在我们看看 evio 的核心部分: serve(events, lns)
，这里会启动 evio 的 sever 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listeners&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listener&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NumLoops&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 确定启动的事件循环数量
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;runtime&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NumCPU&amp;lt;/span&amp;gt;()
}
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listeners&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;cond&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sync&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NewCond&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sync&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Mutex&amp;lt;/span&amp;gt;{})
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;balance&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LoadBalance&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tch&amp;lt;/span&amp;gt; = make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Duration&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//println(&amp;amp;#34;-- server starting&amp;amp;#34;)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serving&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 如果注册了回调函数，就执行
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;svr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Server&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;svr&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NumLoops&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;svr&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Addrs&amp;lt;/span&amp;gt; = make([]&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Addr&amp;lt;/span&amp;gt;, len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listeners&amp;lt;/span&amp;gt;))
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listeners&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;svr&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Addrs&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;] = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnaddr&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serving&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;svr&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Shutdown&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;() { &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// server 退出后的清理工作
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// wait on a signal for shutdown
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;waitForShutdown&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// notify all loops to close by closing all listeners
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trigger&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errClosing&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// wait on all loops to complete reading events
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wg&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Wait&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// close loops and all outstanding connections
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopCloseConn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Close&amp;lt;/span&amp;gt;()
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//println(&amp;amp;#34;-- server stopped&amp;amp;#34;)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }()
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// create loops locally and bind the listeners.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;internal&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;OpenPoll&amp;lt;/span&amp;gt;(),
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;packet&amp;lt;/span&amp;gt;: make([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0xFFFF&amp;lt;/span&amp;gt;), &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// event loop 的 read 缓冲区
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt;: make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;),
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listeners&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;AddRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 将 fd 注册到 epoll 中并监听可读事件
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// start loops in background
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wg&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Add&amp;lt;/span&amp;gt;(len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;))
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 启动所有的 event loop
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopRun&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;serve 主要做这些事：&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;根据配置启动指定数量的 event loop，如果传入配置的 loop 数量为 0 则设置启动一个事件循环，如果传入配置小于 0 则设置为运行平台的CPU核心数量&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;如果设置了回调函数 events.Serving ，运行它&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;按照指定 event loop 数量，创建 epoll 句柄生成 loop ，并将所有的 listener 注册到 epoll 监听可读事件（有客户端连接）&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;启动所有事件循环(一个事件循环一个 goroutine)&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;需要注意的是，evio 将所有的 listener 的 fd 在每一个事件循环的 epoll 中都注册了。也就是说，如果有三个事件循环，一个 listener ，那么这个 listener 的 fd 会注册到三个 epoll 中。这就会出现 epoll 的惊群现象，感兴趣的可以自己搜索了解下。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 当一个新连接到来时，所有的事件循环都会唤醒，但是最终只有一个线程可以accept调用返回成功，其他线程（协程）的accept函数调用返回EAGAIN错误 。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;looprun&amp;#34;&amp;gt;loopRun&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;下面我们看看 loopRun 的内部实现&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopRun&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//fmt.Println(&amp;amp;#34;-- loop stopped --&amp;amp;#34;, l.idx)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;signalShutdown&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wg&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Done&amp;lt;/span&amp;gt;()
}()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;amp;amp;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Tick&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopTicker&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//fmt.Println(&amp;amp;#34;-- loop started --&amp;amp;#34;, l.idx)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Wait&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopNote&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;]
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAccept&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; !&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opened&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopOpened&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopWrite&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAction&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
}
})
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;l.poll.Wait 传入一个回调函数作为参数，当 epoll 收到事件通知时，会执行这个回调函数。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;在这个函数中接受客户端连接，读取客户端数据，调用客户回调函数处理业务逻辑&amp;amp;hellip;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;我们先来看下 poll.Wait 的内部实现，再看看 loopAccept，loopOpened，loopWrite 等函数。
loopRun 方法中最重要的就是 poll.Wait ，我们看看 Linux 下 epoll 的实现&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Wait&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make([]&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EpollEvent&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;64&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EpollWait&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;amp;amp;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EINTR&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ForEach&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;)
}); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;].&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Fd&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
}
}
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;这个函数中是一个死循环，程序会阻塞在此处等待 epoll 的”通知“，然后处理就绪的 fd （读取/发送数据、执行用户注册的回调函数）。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当有 fd 就绪的时候，syscall.EpollWait 函数返回，并且将就绪的 fd 通过 events 传出，返回值 n 为就绪 fd 的个数。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;然后循环逐个遍历就绪的 fd，调用回调函数处理。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;].&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Fd&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;evio-的事件处理&amp;#34;&amp;gt;evio 的事件处理&amp;lt;/h2&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Wait&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopNote&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;]
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAccept&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; !&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opened&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopOpened&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopWrite&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAction&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
}
})
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;当 epoll 检测到有就绪的 fd 时，会逐个调用上面的回调函数，evio 的主要逻辑也在这里。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当 fd == 0 时，会执行 loopNote 函数。loopNote 主要是用来处理一些非 fd 就绪的事件，比如定时任务、强制退出等。当然，我们都知道 fd 为 0 是标准输入，所以此处并不是真的去处理 fd 为 0 的文件描述符（注册到 epoll 的文件描述 &amp;amp;gt;= 3）。作者知道 epoll 返回的就绪 fd 中不会有为 0 的情况，所以此处 fd 为 0，是作者调用时传入，用来表示一种特殊的唤醒场景。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Wait&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;changes&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;changes&amp;lt;/span&amp;gt;[:&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;]
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ForEach&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;我们跳到调用它的地方，可以看到只有在 p.notes.ForEach 这个函数中注册的回调函数中才会传入 fd 为 0 来执行 iter 回调函数。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;notes noteQueue&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;noteQueue 的实现在 internal 目录中的 notequeue.go , 是一个无锁队列。我们不详细分析，只看下 ForEach 这个方法：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;noteQueue&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ForEach&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mu&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Lock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mu&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Unlock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mu&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Unlock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 执行回调函数
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;当队列中有数据时， 会执行回调函数，即&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;从上面的分析中可以我们已经知道为什么会有 fd 为 0 ，下面我们看下 loopNote 做什么。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;loopnote&amp;#34;&amp;gt;loopNote&amp;lt;/h3&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopNote&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;.(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Duration&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;delay&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Tick&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Shutdown&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errClosing&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;delay&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// shutdown
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Wake called for connection
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;] &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// ignore stale wakes
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopWake&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;传入的 note 是 interface{} ，首先对 note 进行类型判断。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当 note 是 time.Duration 时，调用回调函数 events.Tick() ，这是 evio 提供的定时任务接口。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;在 loopRun 函数中，如果设置了定时回调函数，会启动一个协程来来运行 loopTicker&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;amp;amp;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Tick&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopTicker&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;loopTicker 实现如下，可以看出会定时去触发 l.poll.Trigger，并且传入 time.Duration(0)&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopTicker&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trigger&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Duration&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;)); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;break&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tch&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;我们跳到 poll.Trigger 的 linux 下的实现，可以发现 evio 在此处 p.notes.Add(note) ，也就是 time.Duration(0)&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trigger&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Add&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Write&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt;, []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;})
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;poll.Trigger 这个函数不仅仅是在 p.notes 里增加了一个 note，还唤醒了事件循环。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当 epoll 中注册 fd 都没有就绪事件时，线程会挂起，epoll 的 wait 方法会处于阻塞状态。evio 使用
linux 提供的 eventfd 来实现事件循环的唤醒，也就是代码上中的 &amp;lt;code&amp;gt;syscall.Write(p.wfd, []byte{0, 0, 0, 0, 0, 0, 0, 1})&amp;lt;/code&amp;gt; ,往 p.wfd 这个文件描述符中写入了 8 个字节的数据。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;p.wfd 是一个 eventfd , 是 Poll 结构体的成员，在 OpenPoll 时赋值，即打开一个 eventfd 代码如下：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// epoll fd
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// wake fd
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;noteQueue&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;OpenPoll&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; new(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EpollCreate1&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
panic(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;e0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Syscall&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SYS_EVENTFD2&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;e0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Close&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;)
panic(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt; = int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r0&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;AddRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;syscall.Syscall(syscall.SYS_EVENTFD2, 0, 0, 0)&amp;lt;/code&amp;gt; 创建了一个 eventfd ，然后将这个 eventfd 注册到了 epoll 监听可读事件。当 &amp;lt;code&amp;gt;syscall.Write(p.wfd, []byte{0, 0, 0, 0, 0, 0, 0, 1})&amp;lt;/code&amp;gt; 时候，epoll 就会唤醒。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;但是，我翻了好久，也没有找到 evio 在哪里读取 eventfd 写入的8个字节（epoll）。这是一个 bug，所以在 linux 机器上，这是不能用的。&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;这个bug会造成 epoll 不断唤醒，cpu被长期占用&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;当我们注册了 evio 的定时任务 Tick 回调函数，程序启动后会往 eventfd 里写入 8 个字节数据，但是 evio 并没有读取，并且 evio 使用的是 epoll 的默认模式 LT，即只要可读缓冲区里还有数据，epoll 会一直不断唤醒，这是一个严重的 bug，作者应该没有在 linux 环境下严格测试过。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;我们抛开这个 bug， 继续来看 note 为 error 类型的情况。在 serve 函数中，当函数退出时，通过 &amp;lt;code&amp;gt;l.poll.Trigger(errClosing)&amp;lt;/code&amp;gt; 来通知每个事件循环退出。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listeners&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listener&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// wait on a signal for shutdown
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;waitForShutdown&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// notify all loops to close by closing all listeners
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trigger&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errClosing&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// wait on all loops to complete reading events
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wg&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Wait&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// close loops and all outstanding connections
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopCloseConn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Close&amp;lt;/span&amp;gt;()
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//println(&amp;amp;#34;-- server stopped&amp;amp;#34;)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}()
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;当 note 为 *conn 这种情况，是用来提供给使用者主动唤醒当前事件循环&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Wake&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trigger&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;loopaccept&amp;#34;&amp;gt;loopAccept&amp;lt;/h3&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;]
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAccept&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// loop index in the server loops list
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;internal&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// epoll or kqueue
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;packet&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// read packet buffer
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// loop connections fd -&amp;amp;gt; conn
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int32&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// connection count
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;fdconns 是用来存储已连接的TCP connection 信息，key 为 fd， value 为 *conn 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当 epoll 唤醒时，如果 fd 不在当前事件循环的连接，那就说明它是新连接，则执行 loopAccept 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAccept&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;balance&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LeastConnections&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LoadInt32&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lp&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lp&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LoadInt32&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lp&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;) &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do not accept
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RoundRobin&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LoadUintptr&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;accepted&amp;lt;/span&amp;gt;)) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;%&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do not accept
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;AddUintptr&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;accepted&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pconn&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopUDPRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nfd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sa&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Accept&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EAGAIN&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SetNonblock&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nfd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nfd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sa&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sa&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnidx&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;] = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;AddReadWrite&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;AddInt32&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;break&amp;lt;/span&amp;gt;
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;因为 evio 支持多地址监听，所以会存在多个 listener ，也就是 s.lns 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;第一步，先遍历所有的 listener 看看当前 epoll 中就绪的 fd 是哪一个 listener ，然后执行客户端的负载策略，决定新的客户端连接放在哪一个事件循环中。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;这里关于客户端的负载策略，evio 利用了 epoll 的惊群效果，所有的事件循环都会唤醒进入loopAccept，不符合负载策略直接 return nil。 关于这边的更多细节，可以看我的另一篇文章 &amp;lt;a href=&amp;#34;/posts/open-source/evio-code-bug/&amp;#34;&amp;gt;【Golang 网络库 evio 一些问题/bug和思考】&amp;lt;/a&amp;gt;。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;接下来就是常规操作了，&amp;lt;code&amp;gt; syscall.Accept(fd)&amp;lt;/code&amp;gt; 接受连接，然后 &amp;lt;code&amp;gt; syscall.SetNonblock(nfd, true)&amp;lt;/code&amp;gt; 设置成非阻塞模式，&amp;lt;code&amp;gt; l.poll.AddReadWrite(c.fd)&amp;lt;/code&amp;gt; 最后加入事件循环，注册可读可写事件。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;loopopened&amp;#34;&amp;gt;loopOpened&amp;lt;/h3&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopOpened&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opened&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addrIndex&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnidx&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;localAddr&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnidx&amp;lt;/span&amp;gt;].&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnaddr&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;remoteAddr&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;internal&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SockaddrToAddr&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sa&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Opened&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Opened&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = append([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuse&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ReuseInputBuffer&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TCPKeepAlive&amp;lt;/span&amp;gt; &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnidx&amp;lt;/span&amp;gt;].&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TCPListener&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;internal&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SetKeepAlive&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;, int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TCPKeepAlive&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;))
}
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;amp;amp;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ModRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;loopOpened 是在 loopAccept 执行完成后，epoll 会立马再次唤醒然后执行的。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;因为在 loopAccept 中最后将新的客户端连接加入 epoll 管理时注册的是可读可写事件，当前的内核写缓冲区肯定是为空的，所以 epoll 会再次唤醒。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; !&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opened&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopOpened&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;唤醒后会执行到这个 case &amp;lt;code&amp;gt;case !c.opened:&amp;lt;/code&amp;gt;，因为在 loopAccept 中并没有去设置这个值。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;loopOpened 内部的操作，主要就是设置一下 conn 的属性，然后调用客户注册的回调函数 &amp;lt;code&amp;gt;events.Opened&amp;lt;/code&amp;gt; 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;如果在回调函数中，没有给客户端发送数据，则需要重新注册，只注册可读事件，不然 epoll 会一直唤醒（可写事件）。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;loopaction&amp;#34;&amp;gt;loopAction&amp;lt;/h3&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAction&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Close&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopCloseConn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Shutdown&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errClosing&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Detach&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopDetachConn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;amp;amp;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ModRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAction&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;loopAction 会在 &amp;lt;code&amp;gt;case c.action != None:&amp;lt;/code&amp;gt; 的情况下执行， c.action 是执行完用户回调函数后会被赋值的状态。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;在会有 action 的 loopXXX 中都会有如下类似操作。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;||&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ModReadWrite&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;也就是说 loopAction 依赖于 epoll 被可写事件再次唤醒来执行，这样会不会有问题呢？ 内核缓冲区满了？？&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;loopAction 内部的主要操作就是根据 action 做一些处理，关闭连接等等。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;loopread-和--loopwrite&amp;#34;&amp;gt;loopRead 和 loopWrite&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;loopRead 和 loopWrite 主要就是调用系统调用读取和发送数据，并且调用用户回调函数，根据回调函数返回值来重新注册 epoll 的可读可写事件。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Read&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;packet&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;||&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EAGAIN&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopCloseConn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;packet&amp;lt;/span&amp;gt;[:&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;]
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; !&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuse&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; = append([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Data&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = append([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;||&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ModReadWrite&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;调用 &amp;lt;code&amp;gt;n, err := syscall.Read(c.fd, l.packet)&amp;lt;/code&amp;gt; 读取内核缓冲区的数据，如果返回出错 &amp;lt;code&amp;gt;err == syscall.EAGAIN&amp;lt;/code&amp;gt; 意思是再试一次，直接返回。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;如果 n == 0 或者 err 错误不为 syscall.EAGAIN ，则说明对方关闭了连接或是其他错误，直接 loopCloseConn 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;然后调用用户回调函数 s.events.Data ，根据返回值做相应操作。&amp;lt;code&amp;gt;c.action = action&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;如果 out 里有数据，则赋给 c.out , 并且注册可读可写事件。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;如果 &amp;lt;code&amp;gt;c.action != None&amp;lt;/code&amp;gt; ，同样需要注册可读可写事件，原因上面已经说过了。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;loopWrite 操作也大同小异，就不细说了。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;但是其实关于 loopWrite 和 loopRead 的处理是会有 bug 的，详情可以看另一篇文章。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;推荐库&amp;#34;&amp;gt;推荐库&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt; 一个轻量、快速的基于 Reactor 模式的非阻塞 TCP 网络库。&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;</description></item><item><title>Golang 极简入门教程</title><link>https://blog.iofree.xyz/posts/go/go-tutorials/</link><pubDate>Sun, 04 Aug 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/go/go-tutorials/</guid><description>&amp;lt;h1 id=&amp;#34;hello-world&amp;#34;&amp;gt;Hello World&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;我们以传统的“hello world”案例开始吧。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Hello World&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Go的源文件以 &amp;lt;strong&amp;gt;.go&amp;lt;/strong&amp;gt; 为后缀名，这些文件名均由小写字母（推荐做法）组成且不包含空格和其他特殊字符，如 main.go 。如果文件名由多个部分组成，则使用下划线 _ 对它们进行分隔，如 main_test.go 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Go是一门编译型语言,Go语言的工具链将源代码及其依赖转换成计算机的机器指令。Go语言提供的工具都通过一个单独的命令 &amp;lt;strong&amp;gt;go&amp;lt;/strong&amp;gt; 调用，&amp;lt;strong&amp;gt;go&amp;lt;/strong&amp;gt; 命令有一系列子命令。&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;$ go help
Go is a tool for managing Go source code.
Usage:
go &amp;amp;lt;command&amp;amp;gt; [arguments]
The commands are:
bug start a bug report
build compile packages and dependencies
clean remove object files and cached files
doc show documentation for package or symbol
env print Go environment information
fix update packages to use new APIs
fmt gofmt (reformat) package sources
generate generate Go files by processing source
get download and install packages and dependencies
install compile and install packages and dependencies
list list packages or modules
mod module maintenance
run compile and run Go program
test test packages
tool run specified go tool
version print Go version
vet report likely mistakes in packages
...
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;我们通过 &amp;lt;strong&amp;gt;go run&amp;lt;/strong&amp;gt; 命令编译 main.go 文件并且运行它。&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;$ go run main.go
Hello World
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;前面已经说过了GO语言是一门编译型语言，所以通过 &amp;lt;strong&amp;gt;go&amp;lt;/strong&amp;gt; 工具同样可以编译生成二进制文件保存下来。&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;$ go build main.go
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;执行后，会在当前目录生成一个可执行文件 &amp;lt;strong&amp;gt;main&amp;lt;/strong&amp;gt; （Windows平台是 main.exe）。我们可以直接在命令行运行它，就像执行 C/C++ 静态编译出来的可执行文件一样。&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;$ ./main
Hello World
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;Go语言的代码通过包组织,包机制类似于其它语言里的库或者模块。一个包由位于单个目录下的一个或多个 &amp;lt;strong&amp;gt;.go&amp;lt;/strong&amp;gt; 源代码文件组成。每个源文件都以一条 &amp;lt;strong&amp;gt;package&amp;lt;/strong&amp;gt; 声明语句开始，这个例子里就是 &amp;lt;strong&amp;gt;package main&amp;lt;/strong&amp;gt;，表示该文件属于哪个包，紧跟着一系列导入 (&amp;lt;strong&amp;gt;import&amp;lt;/strong&amp;gt;) 的包。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;接下来是这个文件的程序代码，在本例中是 &amp;lt;strong&amp;gt;main&amp;lt;/strong&amp;gt; 函数。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;main 包是一个比较特殊的包，它定义了一个独立可执行的程序，而不是一个库。在 main 包里的 main 函数是整个程序执行时的入口，就像 C/C++ 里一样。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Go的标准库提供了100多个包， fmt 包含有格式化输出、接收输入等方法。Println 函数是其中一个基础函数,可以打印以空格间隔的一个或多个值,并在最后添加一个换行符。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;func&amp;lt;/strong&amp;gt; 是Go语言的关键字之一，用于声明一个函数。一个函数的声明由 func 关键字、函数名、参数列表、返回值列表以及包含在大括号里的函数体组成。本例中的 main 函数参数列表和返回值都是空的，意思就是没有参数和返回值，无需像 C/C++ 中那样再手动添加 void，也不会存在隐式的默认参数。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Go语言不需要在语句或者声明的末尾添加分号,除非一行上有多条语句。但是,实际上编译器会帮我们添加分号。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Go语言在代码格式上强制统一，比如函数作左括号 &amp;lt;strong&amp;gt;{&amp;lt;/strong&amp;gt; 必须另起一行，否则会编译报错。这样省去了很多口水仗，也统一了代码风格，提高了代码可读性。Go语言提供 gofmt (go fmt) 工具把代码格式化为标准格式。&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;gofmt -w main.go
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;该命令会格式化该源文件的代码并且将格式化后的代码覆盖原始内容，如果不加参数 -w 则只会打印格式化后的结果而不重写文件。在实际开发中，我们可以使用IDE或者编辑器插件自动格式化，无需每次执行命令来格式化代码。&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;#34;golang-的主要特点&amp;#34;&amp;gt;Golang 的主要特点&amp;lt;/h1&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;我发现我花了四年时间锤炼自己用 C 语言构建系统的能力，试图找到一个规范，可以更好的编写软件。结果发现只是对 Go 的模仿。缺乏语言层面的支持，只能是一个拙劣的模仿。 &amp;amp;ndash;云风&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;h2 id=&amp;#34;极简设计&amp;#34;&amp;gt;极简设计&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Go 语言给人的第一感觉便是简洁。Go 语言通过减少关键字的数量（25 个，截止至发稿日期）来简化编码过程中的复杂度。这些关键字在编译过程中少到不需要符号表来协助解析，这也是Go语言的编译速度也是非常快的原因之一。极少的关键字，极简的语法都极大减少开发者编码的工作量，也提高了代码的可读性。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Go 语言的强类型系统禁止一切隐式类型转换，让代码更加容易阅读，减少犯错的机会。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;defer 实现 RAII 也比 C++ 中通过对象生命周期和析构函数的实现方式更加容易理解和简洁明了。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;file&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;os&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Open&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;test.txt&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
panic(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;file&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Close&amp;lt;/span&amp;gt;()
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Go 语言默认所有类型 zero 初始化，省去了很多无意义的初始化操作，也降低了开发者出错的几率。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Go 语言部署非常简单，编译出来一个静态可执行文件，除了 glibc 外没有其他外部依赖便可以直接运行。并且 Go 语言支持交叉编译，使用自带的工具 &amp;lt;strong&amp;gt;go build&amp;lt;/strong&amp;gt; 可以直接将源代码编译成不同平台上的可执行程序。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;比如，我们在Mac或者Windows上为Linux编译应用：&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;GOOS=linux GOARCH=amd64 go build main.go
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;只需要声明目标系统（GOOS）与CPU架构（GOARCH）即可。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Go 语言从设计上就坚持极简理念，并且极力给作者提供简单高效的开发体验。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;开发效率与运行效率齐飞&amp;#34;&amp;gt;开发效率与运行效率齐飞&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;“少即是多” 这就是 Go 语言贯穿始终的哲学。极简的语法，语言级别的并发管理，自动垃圾回收让开发者可以用最少的代码实现功能强大的程序。Go 语言没有隐式转换，没有构造函数和析构函数,没有运算符重载,没有继承&amp;amp;hellip;，极大的降低了开发者的心智负担。完善的类型系统让 Go 语言可以避免动态语言那种粗心的类型错误，同时又没有 C++ 那样繁杂的具体类型属性需要考量。Go 语言强制统一代码风格，减少了不少口水战，也让代码的可读性，可维护性更高了，这也是提高开发效率的关键。Go 语言致力于提供更少的语言特性，通过简洁的设计，减少代码出错的机会，让开发者更容易写出更高质量的代码。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Go 语言出现之前，各种语言在运行效率和开发效率上都不能兼备。Python开发效率高，但是性能差强人意; C/C++ 运行效率毋庸置疑，但是开发效率略低。Go 语言运行效率高是因为 Go 语言是编译型的静态语言，它在执行速度上比解释型语言具有先天的优势，但是同时其简洁的语法又让开发者有种写动态语言的轻松感。Go 语言的运行效率直逼 C/C++ ，之所以稍逊于 C/C++ 主要还是因为 GC（自动垃圾回收机制），考虑到开发效率上的提升，这一点性能损失还是值得的。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;强大的内置类型和标准库&amp;#34;&amp;gt;强大的内置类型和标准库&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Go 语言除了几乎所有语言都支持的简单内置类型(比如整型和浮点型等)外， 也内置了一些比较新的语言中内置的高级类型，比如数组、字符串、字典类型(map)。Go语言的标准库覆盖网络、系统、加密、编码、图形等各个方面，可以直接使用标准库的 http 包进行 HTTP 协议的收发处理;网络库基于高性能的操作系统通信模型(Linux 的 epoll、Windows 的 IOCP);所有的加密、编码都内建支持，不需要再从第三方开发者处获取。&amp;lt;/p&amp;gt;
&amp;lt;table&amp;gt;
&amp;lt;thead&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;th&amp;gt;Go语言标准库包名&amp;lt;/th&amp;gt;
&amp;lt;th&amp;gt;功 能&amp;lt;/th&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/thead&amp;gt;
&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;bufio&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;带缓冲的 I/O 操作&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;bytes&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;实现字节操作&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;container&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;封装堆、列表和环形列表等容器&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;crypto&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;加密算法&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;database&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;数据库驱动和接口&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;debug&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;各种调试文件格式访问及调试功能&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;encoding&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;常见算法如 JSON、XML、Base64 等&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;flag&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;命令行解析&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;fmt&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;格式化操作&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;go&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;Go 语言的词法、语法树、类型等。可通过这个包进行代码信息提取和修改&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;html&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;HTML 转义及模板系统&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;image&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;常见图形格式的访问及生成&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;io&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;实现 I/O 原始访问接口及访问封装&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;math&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;数学库&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;net&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;网络库，支持 Socket、HTTP、邮件、RPC、SMTP 等&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;os&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;操作系统平台不依赖平台操作封装&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;path&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;兼容各操作系统的路径操作实用函数&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;plugin&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;Go 1.7 加入的插件系统。支持将代码编译为插件，按需加载&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;reflect&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;语言反射支持。可以动态获得代码中的类型信息，获取和修改变量的值&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;regexp&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;正则表达式封装&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;runtime&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;运行时接口&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;sort&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;排序接口&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;strings&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;字符串转换、解析及实用函数&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;time&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;时间接口&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;text&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;文本模板及 Token 词法器&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;&amp;amp;hellip;&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;&amp;amp;hellip;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;h2 id=&amp;#34;并发&amp;#34;&amp;gt;并发&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;并发编程可以充分发挥多核处理器的性能。在 C/C++ 中，可以通过编写多线程程序来实现并发，但是滥用线程会加重系统负担，所以更优的做法是使用通过 epoll 等方式来实现IO多路复用，以及使用各种协程库。除此之外，多个线程之间肯定还需要传递数据，可以通过 shared_ptr 来做，但是也需要小心翼翼，整个编码过程非常容易犯错。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;goroutine 是 Go 语言并发设计的核心。goroutine 其实就是协程，比线程更轻量，是一种运行在用户态的用户线程。goroutine 并不是对应于内核线程，一个内核线程会调度若干个协程，goroutine 是在语言层面提供了调度器，并且对网络IO库进行了封装，屏蔽了复杂的细节，对外提供统一的语法关键字支持，简化了并发程序编写的成本。channel 是设计来在 goroutine 之间传递数据，channel 在实现原理上其实是一个阻塞的消息队列。在一个 goroutine 中将消息发送到 channel 中，然后在监听这个 channel 的 goroutine 处理，实现了不同 goroutine 的解耦。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;接口设计&amp;#34;&amp;gt;接口设计&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;接口类型是对其它类型行为的抽象和概括;因为接口类型不会和特定的实现细节绑定在一起,通过这种抽象的方式我们可以让我们的函数更加灵活和更具有适应能力。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Go语言的主要设计者之一 Rob Pike 曾经说过，如果只能选择一个Go语言的特性移植到其他语言中，他会选择接口。可见接口在Go 语言中的地位，及其对gloang这门语言所带来的活力。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;C++,Java 中使用侵入式接口，实现类需要明确声明自己实现了某个接口。这种强制性的接口继承方式是面向对象编程思想发展过程中一个争议颇多的特性。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Go语言采用的是非侵入式接口,只要某类型的公开方法完全满足接口的要求，就可以把此类型的对象用在需要该接口的地方。满足接口的要求，即是指实现了接口所规定的一组成员(方法)。Go 语言的接口实现者无需指明实现了哪一个接口，编译器会去完成这项工作并发现错误。&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;#34;控制结构&amp;#34;&amp;gt;控制结构&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Go 程序和大多数编程语言一样从 main() 函数开始执行，然后按顺序执行该函数体中代码。代码中必然需要进行条件判断，Go 中提供如下分支结构：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;if-else&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;switch&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;select&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;Go 中同样有循环结构来重复执行某段代码：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;for(range)&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;if-else-结构&amp;#34;&amp;gt;if-else 结构&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;if 是用于测试某个条件（布尔型或逻辑型）的语句，如果该条件成立，则会执行 if 后由大括号括起来的代码块。else 这个代码块中的代码只有在 if 条件不满足时才会执行。if 和 else 后的两个代码块是相互独立的分支，永远只会执行其中一个。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;condition&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do something
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do something
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;如果需要 增加更多分支选择，可以使用 else if 。else-if 分支的数量是没有限制的，但是当选择条件过多时，应该使用 switch 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;condition1&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do something
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;condition2&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do something else
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// catch-all or default
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;if 可以包含一个初始化语句，常用于 err 的条件判断。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;initialization&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;condition&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do something
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;例如：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fun&amp;lt;/span&amp;gt;(); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do something
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;switch-结构&amp;#34;&amp;gt;switch 结构&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;相比较 C/C++ 等其他语言而言，Go 语言中的 switch 结构使用非常灵活, 并且不需要 breake 语句来跳出。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;value&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v1&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v2&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;value 变量可以是任何类型，v1 和 v2 是同类型的任意值或者是最终结果为相同类型的表达式，但不限于常量和整数。
同一个 case 可以匹配多个可能符合条件的值，通过逗号分割：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;,&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;,&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 当 i == 1 或者 i == 2 或者 i == 3 则执行 f()
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;switch 语句可以不提供任何被判断的值，然后在每个 case 分支中进行测试不同的条件。当任一分支的测试结果为 true 时，该分支的代码会被执行。这看起来非常像链式的 if-else 语句。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f1&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f2&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f3&amp;lt;/span&amp;gt;()
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;switch 语句还可以包含一个初始化语句：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;result&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;calculate&amp;lt;/span&amp;gt;(); {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;result&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;result&amp;lt;/span&amp;gt; &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 0
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;x&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;], &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;y&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;j&amp;lt;/span&amp;gt;]; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;因为 Go 的 switch 相当于每个case最后都自带一个 break ，匹配成功后就不会向下执行其他 case ，所以如果需要接着执行下一个 case 的可以使用 fallthrough 关键字。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;1&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;fallthrough&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;2&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;fallthrough&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;3&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;fallthrough&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;4&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;fallthrough&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;default&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;输出：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;
default
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;fallthrough 只会强制执行下一个 case 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;1&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;fallthrough&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;2&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;fallthrough&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;3&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// fallthrough
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;4&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;fallthrough&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;default&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;输出：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Go 中的 switch 还可以用来做类型判断。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Type&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;.(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;bool&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;float64&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;float64&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;int&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;nil&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;string&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;default&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Type&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Type&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Type&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Type&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Type&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// *int
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;输出：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;int
string
bool
nil
default
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;for-结构&amp;#34;&amp;gt;for 结构&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Go 中循环结构只有 for 语句，并没有 while 语句。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;for 语句基本用法和其他语言无异：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;5&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;支持多个变量控制循环：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;j&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;j&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;j&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;j&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;for 语句实现 while 语句功能：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;--&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;无限循环：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; {
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; ; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; ; ; {
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Go 中还提供一个关键字用于循环结构 range ，它可以迭代任何一个集合（数组，map）。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;k&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;需要注意的是，v 对于元素的值拷贝，任何对 v 的修改都不会影响集合 s 。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;break-和-continue&amp;#34;&amp;gt;break 和 continue&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;和其他语言一样，break 用于跳出整个循环，continue 用于跳出当前循环继续下一次循环。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;continue&amp;lt;/span&amp;gt;
}
println(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;输出：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;break&amp;lt;/span&amp;gt;
}
println(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;输出：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h1 id=&amp;#34;基本数据类型和要素&amp;#34;&amp;gt;基本数据类型和要素&amp;lt;/h1&amp;gt;
&amp;lt;h2 id=&amp;#34;包的概念&amp;#34;&amp;gt;包的概念&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;类似其他语言中的库和模块的概念，目的都是为了支持模块化、封装、单独编译和代码重用。每一个 Go 文件都属于且仅属于一个包，每个包可以有多个 Go 文件。每个包中的程序可以使用自身的包或者导入其他包。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当包内的全局变量或者常量标识符以一个大写字母开头，如： Test，那么它就是可以直接被外部包使用的，称为导出，类似于其他面向对象语言中 public。如果是以小写的字母开头，则对包外是不可见的，但是可以在包内直接使用（同一个包内的不同 .go 文件可以直接使用），类似于其他面向对象语言中的 private。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;每个包都对应一个独立的名称空间。不同包的导出函数或者变量即使名称相同，也不会有命名冲突。在外部调用时必须显示指定包，例如： fmt.Println 。如果包名有冲突，可以在导入的时候设置别名，如：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Hello World&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;如果需要导入多个包&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;os&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;但是有更简短的做法&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;os&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;注释&amp;#34;&amp;gt;注释&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Go 提供了 C 样式 /* */ 块注释和 C++ 样式 // 行注释。行注释是标准规范，块注释主要作为包注释出现或者是禁用大量代码时使用。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 单行注释
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;/*
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt; 块注释
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;*/&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;常量&amp;#34;&amp;gt;常量&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Go 的常量使用 const 关键字定义，常量的数据类型只可以是布尔型、数字型和字符串类型。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;abc&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;abc&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Go 的编译器可以自动推断类型，所以以上两种定义方法都是可以的。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;常量的值必须是能够在编译期就能够确定的，可以在其赋值表达式中涉及计算过程，但是所有用于计算的值必须在编译期间就能获得。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;上面是正确的做法，但是下面的 func1 自定义函数无法在编译期求值，因此无法用于常量的赋值，但是 Go 内置的函数是可以的，如： len() 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;func1&amp;lt;/span&amp;gt;()
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Go 对关键字十分吝啬，对于枚举类型没有专门的关键字，但是常量可以用作枚举。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Go 语言还提供了 iota 关键字，可以用来简化常量的增长数字的定义。iota 会自增 1 ,每遇到一次 const 关键字，就重置为 0 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;iota&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//0
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//1
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//2
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;变量&amp;#34;&amp;gt;变量&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Go 声明变量使用 var 关键字：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 0
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// false
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// &amp;amp;#34;&amp;amp;#34;
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;d&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// nil
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;声明变量时可以不赋值，默认初始化都会是 ”零“ 值，不会出现 C/C++ 那样的随机值。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Go 的编译器同样可以根据变量的值来自动推断其类型：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;12&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Go 还提供简短声明语法 := ，不过只可以用于声明函数体内的局部变量，不能用在全局变量的声明与赋值，例如：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//等价于 var a = 1
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;需要注意的是 := 是声明并初始化，所以 := 左边必须是一个新值，否则会出现编译错误。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;基本类型和运算符&amp;#34;&amp;gt;基本类型和运算符&amp;lt;/h2&amp;gt;
&amp;lt;h3 id=&amp;#34;布尔类型&amp;#34;&amp;gt;布尔类型&amp;lt;/h3&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;布尔类型的值只可以是 true 或者 false ，两个类型相同的值可以使用 == 和 != 运算符来比较并且得到一个布尔类型的值。Go 是一门强类型的语言，所以必须是相同类型的两个值才可以进行比较。如果是一个字面量和一个值比较，值的类型必须和字面量类型兼容。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;10&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 可以
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3.5&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 编译报错
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;数字类型&amp;#34;&amp;gt;数字类型&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Go 支持整型、浮点型数字和复数类型。&amp;lt;/p&amp;gt;
&amp;lt;h4 id=&amp;#34;整形&amp;#34;&amp;gt;整形&amp;lt;/h4&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;int int8 int16 int32 int64&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;uint uint8 uint16 uint32 uint64&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;int 和 uint 在 32 位系统上是 32 位（4个字节），在64位操作系统上是 64 位（8个字节）。其他如 int8 这种都是与系统无关的类型，有固定的大小，从类型的名称就可以看出其大小。&amp;lt;/p&amp;gt;
&amp;lt;h4 id=&amp;#34;浮点型&amp;#34;&amp;gt;浮点型&amp;lt;/h4&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;float32&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;float64&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;float32 精确到小数点后 7 位，float64 精确到小数点后 15 位。应该尽可能地使用 float64，因为 math 包中所有有关数学运算的函数都会要求接收这个类型。&amp;lt;/p&amp;gt;
&amp;lt;h4 id=&amp;#34;复数&amp;#34;&amp;gt;复数&amp;lt;/h4&amp;gt;
&amp;lt;p&amp;gt;Go 提供以下复数类型：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;complex64&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;complex128&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;复数使用 re+imI 来表示，其中 re 代表实数部分，im 代表虚数部分，I 代表根号负 1 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;complex64&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;5&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;10i&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;内置的 complex 函数用于构建复数,内建的 real 和 imag 函数分别返回复数的实部和虚部。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;x&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;complex128&amp;lt;/span&amp;gt; = complex(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 1+2i
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;y&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;complex128&amp;lt;/span&amp;gt; = complex(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 3+4i
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;x&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;y&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// &amp;amp;#34;(-5+10i)&amp;amp;#34;
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(real(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;x&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;y&amp;lt;/span&amp;gt;)) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// &amp;amp;#34;-5&amp;amp;#34;
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(imag(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;x&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;y&amp;lt;/span&amp;gt;)) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// &amp;amp;#34;10&amp;amp;#34;
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;字符类型&amp;#34;&amp;gt;字符类型&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Go 中字符类型 byte 只是整数的特殊用例，byte 类型是 uint8 的别名。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#39;a&amp;amp;#39;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;65&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;关系运算符&amp;#34;&amp;gt;关系运算符&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Go 中拥有以下逻辑运算符，和其他语言的用法相同，运算结果总是为布尔值。&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;!= 、 ==&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;amp;lt; 、 &amp;amp;lt;= 、 &amp;amp;gt; 、 &amp;amp;gt;=&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;amp;amp;&amp;amp;amp; 、 ||&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3 id=&amp;#34;逻辑运算符&amp;#34;&amp;gt;逻辑运算符&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;amp;&amp;amp;amp; 、 || 逻辑与和逻辑或同样支持短路法则。&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;h3 id=&amp;#34;算术运算符&amp;#34;&amp;gt;算术运算符&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Go 提供常用的整数和浮点数的二元运算符： + 、 - 、* 、/ 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;5&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 2
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;5&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;%&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 1
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;对于语句 a = a + 2 ，同样提供 -= 、 *= 、 /= 、 %= 运算符来简化写法。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;++ 、 &amp;amp;ndash; 一元操作符在 Go 中只能用于后缀，并且只能作为语句而非表达式。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 正确
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 编译报错，不能用于前缀
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 编译报错，不能作为表达式
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;字符串&amp;#34;&amp;gt;字符串&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Go 语言的字符串是一个以UTF8编码的字节序列，并且一旦创建就无法更改。无法像 C/C++ 那样通过索引改变字符串中的某个字符（取字符串某个字节的地址也是非法的 &amp;amp;amp;str[i] ），并且 Go 中的字符串是根据长度限定，不是特殊字符 \0 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;str&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Go 语言的字符串如果声明时未初始化，则默认是 ”零“ 值，即空串 &amp;amp;quot;&amp;amp;quot; ，长度为0&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;str&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Hello &amp;amp;#34;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;World&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;str&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34; ! &amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;字符串可以通过 &amp;lt;strong&amp;gt;+&amp;lt;/strong&amp;gt; 号拼接，也可以使用 &amp;lt;strong&amp;gt;+=&amp;lt;/strong&amp;gt; 简写形式。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;数组&amp;#34;&amp;gt;数组&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;数组是一个有固定长度的且类型唯一的数据序列，&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;arr&amp;lt;/span&amp;gt; [&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;]) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 打印第一个元素 0
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;[len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;)&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;]) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 打印最后一个元素 0
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;同样，数组的每个元素都被初始化为元素类型对应的 ”零“ 值，在此处是 0 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; [&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; = [&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; [&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;{ &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;可以在声明数组时给定一组值来初始化数组，在数组长度位置用 &amp;amp;ldquo;&amp;amp;hellip;&amp;amp;rdquo; 三个点来替代，代表数组的长度根据具体数值的个数来计算。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;把一个大数组通过函数传参会消耗大量内存，因为 Go 语言都是值传递，会将数组完整的拷贝一份。可以通过两种方法在避免：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;传递数组的指针&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;使用切片&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;切片slice&amp;#34;&amp;gt;切片(slice)&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;切片是一个长度可变的数组，类似 C++ 的动态数组（vector）。切片的语法和数组很像，只是切片没有限定固定长度。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 切片
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; [&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 数组
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;一个切片底层由三部分组成：指针、长度、容量。指针指向切片的第一个元素的地址，长度对应切片中元素的数量，容量是切片底层分配的连续内存空间可容纳元素的数量。切片提供 cap() 函数来计算其容量， len() 函数来计算其长度。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;5&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;[:&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;]) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// [0 1]
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;:]) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// [2 3 4 5]
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// [0 1 2 3 4 5]
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;一个 ”零“ 值的切片是nil，长度和容量都为0。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// len(s) == 0, s == nil
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// len(s) == 0, s == nil
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; = []int(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// len(s) == 0, s == nil
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; = []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;{} &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// len(s) == 0, s !=nil
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;我们可以通过 &amp;lt;strong&amp;gt;make&amp;lt;/strong&amp;gt; 函数创建以一个指定元素类型、长度和容量的切片。容量参数可以不传，Go 会按照指定的长度和类型初始化。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// make([]T, len, cap)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;make([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// [0,0,0]
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;make([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;5&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// [0,0,0, *, *]
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Go 内置的 append 函数可以向切片追加元素。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;append 函数底层在每次操作之前都会先检查切片的容量，如果容量够，就会直接将新添加的元素复制到对应位置并将长度加1;如果容量不够，会先分配一个足够大的内存空间，然后将原来的切片内容和新添加的全部复制过去，再返回这个切片。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;map&amp;#34;&amp;gt;Map&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Map 是一个无序的 key/value 的集合，类似于其他编程语言中的字典，哈希表。Map 和 切片一样在使用过程会自动扩容。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;m&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;10&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 初始化容量为 10
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;abc&amp;amp;#34;&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;def&amp;amp;#34;&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;,
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;m&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;test&amp;amp;#34;&amp;lt;/span&amp;gt;] = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 错误， 此时 m 是 nil
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;abc&amp;amp;#34;&amp;lt;/span&amp;gt;])
delete(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;,&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;abc&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Map 可以使用 make 函数创建（可以选择在创建时指定容量），也可以通过map字面值的语法创建，同时还可以指定一些最初的 key/value。需要注意的是，未初始化的 map 的值是 nil，直接访问会出错。Map 中的元素通过key对应的下标语法访问。使用内置的delete函数可以删除元素。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;key对应的下标语法访问时，通过如果key在map中是存在的,那么将得到与key对应的value。如果key不存在,那么将得到value对应类型的零值。但是元素类型为 int，就无法区分 0 了。为此，Go 提供了两个返回值来区分。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;test&amp;amp;#34;&amp;lt;/span&amp;gt;]
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; !&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; {
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;当 ok 为 false 时表示 Map 中找不到 key 等于 &amp;amp;ldquo;test&amp;amp;rdquo; 对应的元素。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;结构体&amp;#34;&amp;gt;结构体&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;结构体是一种聚合的数据类型,是由零个或多个任意类型的值聚合成的实体。结构体定义的一般方式如下：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// type identifier struct {
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// field1 type1
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// field2 type2
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// ...
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// }
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Abc&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;A&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;B&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;C&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Abc&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;A&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;B&amp;lt;/span&amp;gt; =&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;使用内置的 new 函数可以给一个新的结构体变量分配内存，它返回指向已分配内存的指针。Go 中使用点符号获取结构体中的值：structname.fieldname = value 。实际上，在 Go 中无论是值类型还是指针类型都使用点符号，并没有 C/C++ 中的 -&amp;amp;gt; 符号。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Abc&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt; = new(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Abc&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; new(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Abc&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;A&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t2&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;B&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;结构体初始化主要有两种方法，一种是按照结构体成员定义的顺序为每个成员指定一个面值，这样如果结构体成员顺序又调整就需要改动所有初始化结构体的地方了，所以不太建议着一种;另一种就是，以成员名字和对应值来初始化。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Abc&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;A&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;B&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;C&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Abc&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Abc&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;A&amp;lt;/span&amp;gt; : &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;B&amp;lt;/span&amp;gt; : &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;C&amp;lt;/span&amp;gt; : &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;,
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h1 id=&amp;#34;函数&amp;#34;&amp;gt;函数&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Go 里面有三种类型的函数：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;普通的命名函数&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;匿名函数或者lambda函数&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;方法&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;函数参数和返回值&amp;#34;&amp;gt;函数参数和返回值&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;除 main() 、init() 函数外，Go 中其它所有类型的函数都可以有参数与返回值。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;函数参数、返回值及它们的类型被统称为函数签名。函数可以返回零个或多个值，相较于 C/C++ 等语言多值返回是 Go 的一大特性。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Test1&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Test2&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;b&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;命名返回值&amp;#34;&amp;gt;命名返回值&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;命名返回值作为结果形参被初始化为相应类型的零值，当需要返回的时候，我们只需要一条简单的不带参数的return语句。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Test3&amp;lt;/span&amp;gt;() (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;){
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret1&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret2&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;按值传递&amp;#34;&amp;gt;按值传递&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Go 中默认都是使用按值传递，也就是说函数传参时都会拷贝一个副本出来到函数内部使用。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;如果不希望拷贝带来太大的性能开销，或者希望可以改变参数的内容，可以传递指针。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;指针也是一个变量，函数传参时同样时按值传递，只不过拷贝的是指针，也就是变量的地址。指针通常是一个32位或者64位的值，所以性能开销比传递一些结构体要小的多。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;在 Go 中也有一些按引用传递的类型：切片（sleice）、字典（mao）、接口（interface）、通道（chan）。其实，这些类型的底层同样是使用指针来实现的。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;例如，切片的底层是一个指针指向一片内存的首地址，len 记录已用内存的长度，cap 记录切片的容量。在传递切片时，仅仅会将这三个值拷贝一份，而不会去拷贝切片里的全部数据。所以，我们在使用 Go 自带的这些引用类型时可以直接传参，无需担心性能开销而传递指针。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;slice&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;array&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;unsafe&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Pointer&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;len&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;cap&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;变长参数&amp;#34;&amp;gt;变长参数&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Go 中支持变长参数，在函数的最后一个参数采用 &amp;amp;hellip;type 的形式，可以传递 0 个或者多个参数。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; , &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;args&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
}
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;23&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;45&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;67&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;89&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;如果参数是数组或者切片，可以通过 val&amp;amp;hellip; 来自动展开。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sl&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sl&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;defer&amp;#34;&amp;gt;defer&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 return 语句之后）一刻才执行某个语句或函数。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 1
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;当有多个 defer 行为被注册时，它们会以 defer 的出现顺序逆序执行（类似栈，即后进先出）。
使用 defer 会有一定的性能开销，但是 defer 在程序 panic 的时候，还保证会执行。所以通过我们会使用 defer 进行一些函数执行收尾工作。例如，关闭文件描述符，解锁等。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;闭包&amp;#34;&amp;gt;闭包&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Go 支持匿名函数，函数在 Go 中是一等公民，可以将函数赋值给变量，在需要时再执行。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;func&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 直接执行
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;func&amp;amp;#34;&amp;lt;/span&amp;gt;)
}()
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;匿名函数同样被称之为闭包，闭包可使得某个函数捕捉到一些外部状态。例如：引用一些外部变量，这些变量可以在闭包中被操作，生命周期延长至和闭包一样。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fun&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fun1&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;()) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;()
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Hello World&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fun&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 2
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 3
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fun1&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 4
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;init-函数&amp;#34;&amp;gt;init 函数&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;init 函数是 Go 中一个特殊函数，每个包都可以有 init 函数，它先于 main 函数执行，用于做一些初始化操作。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;init 函数的主要特点：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;init 函数在全局变量初始化之后，main 函数执行前自动执行，不能被手动调用&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;init 函数没有参数和返回值&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;每个包可以包含多个 init 函数，同一个包的 init 函数间的执行顺序不确定&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;不同包内的 init 函数按照导入包的顺序执行&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;T&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;var T int64 = a()&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;init&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;init()&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;main()&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;输出：&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;var T int64 = a()
init()
main()
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;h1 id=&amp;#34;并发编程&amp;#34;&amp;gt;并发编程&amp;lt;/h1&amp;gt;
&amp;lt;h2 id=&amp;#34;并发与并行&amp;#34;&amp;gt;并发与并行&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;并发与并行是不同的。一个并发程序可以在一个单核处理器使用多个线程来执行多个任务，就好像这些任务同时执行一样。但是同一时间点只有一个任务在执行，是操作系统内核在调度不同的线程交叉执行使得它们好像在同时执行一样。而并行是指在同一时间点程序同时执行多个任务，是物理上真正的同时执行，而非看着像。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;并行是一种利用多处理器提高运行速度的能力。所以并发程序可以是并行的，设计优秀的并发程序运行在多核或者多处理器上也可以实现并行。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;多线程程序可以编写出高并发应用，重复利用多核处理器性能，但是编写多线程程序非常容易出错，最主要的问题是内存中的数据共享。多线程程序在多核处理器上的并行执行和操作系统对线程调度的随机性，导致这多个线程中共享的数据会以无法预知的方式进行操作。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;传统解决方案是同步不同的线程，即对数据加锁。这样在同一时间点就只有一个线程可以变更数据，但是这使得原来可以在多核处理器上并行执行的程序串行化了，无法重复利用多核处理器的能力。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;go-提供的并发编程特性&amp;#34;&amp;gt;Go 提供的并发编程特性&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Go 语言原生支持程序的并发执行。Go 语言提供 协程 (goroutine) 与通道 (channel) 来支持并发编程。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Go 的协程和其他语言中的协程是不太一样。Go 的协程意味着并行，或是可以并行，而其他语言的协程一般来说是单线程串形化执行的，需要程序主动让出当前CPU。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;协程-goroutine&amp;#34;&amp;gt;协程 goroutine&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Go 的协程和操作系统线程不是一对一的关系，一个协程对应于一个或多个线程，映射（多路复用，执行于）在它们之上。也就是说一个协程可能会在多个操作系统线程上都运行过，同一个操作系统线程会运行多个 Go 协程，Go 语言的协程调度器负责完成调度。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;操作系统线程上的协程时间片让我们可以使用少量的操作系统线程就能运行任意多个协程，而且 Go 运行时可以聪明的意识到哪些协程被阻塞了，暂时搁置它们并处理其他协程。比如，当系统调用（比如等待 I/O）阻塞协程时，当前协程会被挂起，其他协程会继续在其他线程上工作，当 I/O 事件到来，挂起的协程会自动恢复执行。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Go 每个协程创建时占用4k栈内存，协程的栈会根据需要进行伸缩，不出现栈溢出，开发者不需要关心栈的大小。当协程结束的时候，它会静默退出，用来启动这个协程的函数不会得到任何的返回值。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;time&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;GoRun&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;go &amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Hello World&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;go&amp;amp;#34;&amp;lt;/span&amp;gt;)
}()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;go &amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;)
}(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;GoRun&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;输出 ：&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;Hello World
go 2
go
go 1
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;这个输出结果的顺序并不是固定的，因为 go 关键字启动的协程都是并发执行的。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Go 程序 main() 函数也可以看做是一个协程，尽管它并没有通过 go 来启动。如果 main() 函数退出了，其他协程也会随之退出，这就是为什么上面的代码要在最后加上 &amp;lt;code&amp;gt;time.Sleep(1*time.Second)&amp;lt;/code&amp;gt;。&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;在一个协程中，如果需要进行非常密集的运算，可以在运算循环中周期的使用 runtime.Gosched()。这会让出处理器，允许运行其他协程；它并不会使当前协程挂起，所以它会自动恢复执行。使用 Gosched() 可以使计算均匀分布，使通信不至于迟迟得不到响应。&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;h3 id=&amp;#34;通道-channel&amp;#34;&amp;gt;通道 channel&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;协程间可以使用共享内存来实现通信，Go 提供 sync 包来实现协程同步，不过 Go 中还提供一种更优雅的方式：使用 channels 来同步协程。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;通道就像一个可以用于发送类型化数据的管道，Go 保障在任何给定时间内，通道内的一个数据只有一个协程可以对其访问，所以不会发生数据竞争。也就是说，Go 语言保障通道的发送和接受的原子性。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// &amp;amp;lt;nil&amp;amp;gt;
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; = make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;, len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;), cap(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;)) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 0xc00008c000 0 1
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;通道是引用类型，未初始化的通道的值是nil，使用 make 分配内存 &amp;lt;code&amp;gt;ch := make(chan int)&amp;lt;/code&amp;gt;。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;通道只能传输一种类型的数据，比如 chan int 或者 chan string，所有的类型都可以用于通道，空接口 interface{} 也可以。通道在 Go 中同样是一等公民，可以存储在变量中，作为函数的参数传递，作为函数返回值，甚至可以通过通道发送它们自身。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;通道使用 &amp;lt;code&amp;gt;&amp;amp;lt;-&amp;lt;/code&amp;gt; 符号来发送或是接受数据，信息按照箭头的方向流动。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;ch &amp;amp;lt;- int1&amp;lt;/code&amp;gt; 表示用通道 ch 发送变量 int1。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;int2 := &amp;amp;lt;- ch&amp;lt;/code&amp;gt; 表示变量 int2 从通道 ch接收数据。如果 int2 已经声明过，则应该写成 &amp;lt;code&amp;gt;int2 = &amp;amp;lt;- ch &amp;lt;/code&amp;gt; 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&amp;amp;lt;- ch&amp;lt;/code&amp;gt; 表示获取通道的一个值，并且丢弃之，&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;time&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sendData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;getData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;input&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;input&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;input&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sendData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;getData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;输出：&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;1
2
3
4
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;通道是可以带缓冲的，&amp;lt;code&amp;gt;ch := make(chan int, 5)&amp;lt;/code&amp;gt; 即通道里可以容纳 5 个 int 类型的值。&amp;lt;code&amp;gt;ch := make(chan int)&amp;lt;/code&amp;gt; 默认是没有缓冲区的，即容量大小为1 。当通道数据满时，往通道中发送操作会阻塞，直到通道中有空闲的空间。当通知中没有数据时，从通道中接受数据的操作会被阻塞，直到通道缓冲区中有数据。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;将上面的例子稍作修改：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;time&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sendData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;sendData&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;ch &amp;amp;lt;- 1&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;ch &amp;amp;lt;- 2&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;ch &amp;amp;lt;- 3&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;ch &amp;amp;lt;- 4&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sendData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;输出：&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;sendData
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;因为没有接收通道 ch 数据，所以协程 sendData 一直阻塞在 &amp;lt;code&amp;gt;ch &amp;amp;lt;- 1&amp;lt;/code&amp;gt;，直到 main 函数 time.Sleep 结束后程序退出。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;将通道设为有缓冲区的，设置容量为2: &amp;lt;code&amp;gt;ch := make(chan int, 2)&amp;lt;/code&amp;gt;, 重新执行，输出如下：&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;sendData
ch &amp;amp;lt;- 1
ch &amp;amp;lt;- 2
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;下面验证一下接收数据阻塞的情况&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;time&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;getData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;input&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;getData&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;input&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;input&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;getData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;输出：&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;getData
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;程序启动了一个协程来接收通道 ch 中的数据，但是没有操作来往通道中发送数据，所以协程 getData 一直阻塞在 &amp;lt;code&amp;gt;input = &amp;amp;lt;-ch&amp;lt;/code&amp;gt;，直到程序退出。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;通道创建的时候都是双向的，但是通道类型可以用注解来表示它只发送或者只接收，从而来限制协程对通道的操作。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;time&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sendData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;getData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;input&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;input&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;input&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sendData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;getData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;通道可以通过 close 显式关闭，如果通道类型被注解，只有发送类型的通道可以被关闭。对已经 close 过的通过再次 close 会导致运行时的 panic 。读取已经关闭的通道，会立即返回通道数据类型的零值。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;time&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sendData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;
close(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;getData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;input&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;input&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;input&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sendData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;getData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;输出：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;上面的输出，会继续一直打印 0 ，直到程序退出。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Go 提供方法来检测通道是否已经关闭：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;当通道已经关闭的时候，ok 为 false；通道打开时，ok 为 true 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;还可以使用 for-range 来读取通道，这会自动检测通道是否关闭。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;time&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sendData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;
close(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;getData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;input&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;input&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;input&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;getData exit&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sendData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;getData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;输出：&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;1
2
3
4
getData exit
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;从上面的例子可以看出，当通道被关闭时， for-range 循环会自动跳出，结束循环。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;现实的开发中，会运行很多的协程，可能需要从多个通道中接收或者发送数据，Go 可以使用 select 关键字来处理多个通道的问题。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;select 监听进入通道的数据，如果所有的通道的都没有数据则会一直阻塞，直到有一个通道有数据；如果有多个可以处理，select 会随机选择一个处理；特别需要注意的是，如果所有的通道都没有数据，而且写了 default 语句，则会执行 default 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;time&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sendData1&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// close(ch)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sendData2&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;a&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;b&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;c&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;d&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// close(ch)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;getData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;select&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch1&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch2&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// default:
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// fmt.Println(&amp;amp;#34;default&amp;amp;#34;)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sendData1&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch1&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sendData2&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch2&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;getData&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch1&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ch2&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;输出：&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;1
2
a
b
3
c
4
d
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;如果将上面注释掉的 default 语句处的代码打开，则在正确接收所有通道的所有数据后会一直打印 default ，直到程序退出。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;select 不会自动处理通道关闭的情况，如果将代码中关于 close 的代码注释打开，select 正确接收所有通道的所有数据后会只一直打印 0 和 &amp;amp;quot;&amp;amp;quot; (int 和 string 的零值)。&amp;lt;code&amp;gt;case v,ok := &amp;amp;lt;-ch1:&amp;lt;/code&amp;gt; 可以判断通道的开关情况。&amp;lt;/p&amp;gt;</description></item><item><title>Golang实现默认参数</title><link>https://blog.iofree.xyz/posts/go/go-options/</link><pubDate>Thu, 27 Jun 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/go/go-options/</guid><description>&amp;lt;p&amp;gt;在golang 中是不支持默认参数的，micro中有一种优雅的实现方法(并非 micro 首创)，叫做 Functional Options Patter。Functional Options 可以用来实现简洁的支持默认参数的函数方法。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;options&amp;#34;&amp;gt;options&amp;lt;/h2&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;time&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Options&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ConnectTimeOut&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Duration&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Name&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Address&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Option&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Options&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;newOptions&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opt&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Option&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Options&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Options&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opt&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Address&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Address&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;DefaultAddress&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Name&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Name&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;DefaultName&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ConnectTimeOut&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Duration&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ConnectTimeOut&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;DefaultConnectTimeOut&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Name server name
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Name&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Option&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Options&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Name&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;
}
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Address server address
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Address&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Option&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Options&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Address&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;
}
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// ConnectTimeOut 连接超时时间
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ConnectTimeOut&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Duration&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Option&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Options&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;o&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ConnectTimeOut&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;server&amp;#34;&amp;gt;server&amp;lt;/h2&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;sync&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;DefaultAddress&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;:0&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;DefaultName&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;server&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;DefaultConnectTimeOut&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Server&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sync&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RWMutex&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Options&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NewServer&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Option&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Server&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;options&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;newOptions&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Server&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;options&amp;lt;/span&amp;gt;,
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Server&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Options&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Options&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RLock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RUnlock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Server&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Init&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Option&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Lock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opt&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opt&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Unlock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Server&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Start&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Server&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Stop&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;使用&amp;#34;&amp;gt;使用&amp;lt;/h2&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NewServer&amp;lt;/span&amp;gt;(
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Name&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;test Name&amp;amp;#34;&amp;lt;/span&amp;gt;),
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Address&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;test Address&amp;amp;#34;&amp;lt;/span&amp;gt;),
)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;</description></item></channel></rss>
This message is used to verify that this feed (feedId:73287159832503296) belongs to me (userId:62405606888475648). Join me in enjoying the next generation information browser https://follow.is.