<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Open Source on 顾惜朝 的博客</title><link>https://blog.iofree.xyz/tags/open-source/</link><description>Recent content in Open Source on 顾惜朝 的博客</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 31 Oct 2019 11:22:38 +0800</lastBuildDate><atom:link href="https://blog.iofree.xyz/tags/open-source/index.xml" rel="self" type="application/rss+xml"/><item><title>[gev] 自定义协议支持</title><link>https://blog.iofree.xyz/posts/open-source/gev-protocol/</link><pubDate>Thu, 31 Oct 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/open-source/gev-protocol/</guid><description>&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;https://github.com/Allenxuxu/gev&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;gev&amp;lt;/code&amp;gt; 是一个轻量、快速的基于 Reactor 模式的非阻塞 TCP 网络库，支持自定义协议，轻松快速搭建高性能服务器。&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;h2 id=&amp;#34;tcp-为什么会粘包&amp;#34;&amp;gt;TCP 为什么会&amp;amp;quot;粘包&amp;amp;quot;&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;TCP 本身就是面向流的协议，就是一串没有界限的数据。所以本质上来说 TCP 粘包是一个伪命题。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;TCP 底层并不关心上层业务数据，会套接字缓冲区的实际情况进行包的划分，一个完整的业务数据可能会被拆分成多次进行发送，也可能会将多个小的业务数据封装成一个大的数据包发送（Nagle算法）。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;gev-如何优雅处理&amp;#34;&amp;gt;gev 如何优雅处理&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;gev 通过回调函数 &amp;lt;code&amp;gt;OnMessage&amp;lt;/code&amp;gt; 通知用户数据到来，回调函数中会将用户数据缓冲区（ringbuffer）通过参数传递过来。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;用户通过对 ringbuffer 操作，来进行数据解包，获取到完整用户数据后再进行业务操作。这样又一个明显的缺点，就是会让业务操作和自定义协议解析代码堆在一起。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;所以，最近对 &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt; 进行了一次较大改动，主要是为了能够以插件的形式支持各种自定义的数据协议，让使用者可以便捷处理 TCP 粘包问题，专注于业务逻辑。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://cdn.jsdelivr.net/gh/Allenxuxu/blog/img/protocol-b8617cda.png&amp;#34; alt=&amp;#34;protocol.png&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;做法如下，定义一个接口 Protocol&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Protocol 自定义协议编解码接口
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;UnPacket&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ringbuffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RingBuffer&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}, []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Packet&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;用户只需实现这个接口，并注册到 server 中，当客户端数据到来时，gev 会首先调用 UnPacket 方法，如果缓冲区中的数据足够组成一帧，则将数据解包，并返回真正的用户数据，然后在回调 OnMessage 函数并将数据通过参数传递。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;下面，我们实现一个简单的自定义协议插件，来启动一个 Server ：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-text&amp;#34; data-lang=&amp;#34;text&amp;#34;&amp;gt;| 数据长度 n | payload |
| 4字节 | n 字节 |
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// protocol.go
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;encoding/binary&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/Allenxuxu/gev/connection&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/Allenxuxu/ringbuffer&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/gobwas/pool/pbytes&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;exampleHeaderLen&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ExampleProtocol&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;d&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ExampleProtocol&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;UnPacket&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;connection&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ringbuffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RingBuffer&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}, []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualLength&amp;lt;/span&amp;gt;() &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;exampleHeaderLen&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buf&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pbytes&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;GetLen&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;exampleHeaderLen&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pbytes&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Put&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buf&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buf&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;dataLen&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;binary&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;BigEndian&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Uint32&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buf&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualLength&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;gt;=&amp;lt;/span&amp;gt; int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;dataLen&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;dataLen&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualFlush&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualRevert&amp;lt;/span&amp;gt;()
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;d&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ExampleProtocol&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Packet&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;connection&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;dataLen&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;exampleHeaderLen&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;dataLen&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;binary&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;BigEndian&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;PutUint32&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;, uint32(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;dataLen&amp;lt;/span&amp;gt;))
copy(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt;:], &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ret&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// server.go
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;flag&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;log&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;strconv&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/Allenxuxu/gev&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/Allenxuxu/gev/connection&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;example&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;example&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;OnConnect&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;connection&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34; OnConnect ： &amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;PeerAddr&amp;lt;/span&amp;gt;())
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;example&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;OnMessage&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;connection&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ctx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;OnMessage：&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;example&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;OnClose&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;connection&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;OnClose&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; new(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;example&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;IntVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;port&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1833&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;server port&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;IntVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;loops&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;num loops&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Parse&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gev&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NewServer&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gev&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Address&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;:&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;strconv&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Itoa&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;)),
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gev&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NumLoops&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;),
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gev&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ExampleProtocol&amp;lt;/span&amp;gt;{}))
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
panic(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;server start&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Start&amp;lt;/span&amp;gt;()
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev/tree/master/example/protocol&amp;#34;&amp;gt;完整代码地址&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当回调 &amp;lt;code&amp;gt;OnMessage&amp;lt;/code&amp;gt; 函数的时候，会通过参数传递已经拆好包的用户数据。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当我们需要使用其他协议时，仅仅需要实现一个 Protocol 插件，然后只要 &amp;lt;code&amp;gt;gev.NewServer&amp;lt;/code&amp;gt; 时指定即可：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gev&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NewServer&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;handler&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gev&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NumLoops&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;), &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;gev&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;XXXProtocol&amp;lt;/span&amp;gt;{}))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;基于-protocol-plugins-模式为-gev-实现-websocket-插件&amp;#34;&amp;gt;基于 Protocol Plugins 模式为 gev 实现 WebSocket 插件&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;得益于 Protocol Plugins 模式的引进，我可以将 WebSocket 的实现做成一个插件（WebSocket 协议构建在 TCP 之上），独立于 gev 之外。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;websocket&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;log&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/Allenxuxu/gev/connection&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/Allenxuxu/gev/plugins/websocket/ws&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/Allenxuxu/ringbuffer&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Protocol websocket
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;upgrade&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ws&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Upgrader&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// New 创建 websocket Protocol
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;u&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ws&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Upgrader&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;upgrade&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;u&amp;lt;/span&amp;gt;}
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// UnPacket 解析 websocket 协议，返回 header ，payload
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;UnPacket&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;connection&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ringbuffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RingBuffer&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ctx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;upgraded&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Context&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;upgraded&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;upgrade&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Upgrade&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Websocket Upgrade :&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SetContext&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;)
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;header&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ws&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualReadHeader&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Println&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualLength&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;gt;=&amp;lt;/span&amp;gt; int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;header&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Length&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualFlush&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;payload&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;, int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;header&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Length&amp;lt;/span&amp;gt;))
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Read&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;payload&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;header&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Masked&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ws&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Cipher&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;payload&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;header&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Mask&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ctx&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;header&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;payload&amp;lt;/span&amp;gt;
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;buffer&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;VirtualRevert&amp;lt;/span&amp;gt;()
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Packet 直接返回
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Protocol&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Packet&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;connection&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Connection&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;data&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;具体的实现，可以到仓库的 &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev/tree/master/plugins/websocket&amp;#34;&amp;gt;plugins/websocket&amp;lt;/a&amp;gt; 查看。&amp;lt;/p&amp;gt;</description></item><item><title>Go 网络库并发吞吐量测试</title><link>https://blog.iofree.xyz/posts/open-source/gev-benchmark/</link><pubDate>Sun, 22 Sep 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/open-source/gev-benchmark/</guid><description>&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;https://github.com/Allenxuxu/gev&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;本文主要测试 &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt; 网络库和其他三方 Go 网络库以及标准库的吞吐量对比。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;测试对象&amp;#34;&amp;gt;测试对象&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt; ：一个轻量、快速的基于 Reactor 模式的非阻塞 TCP 网络库&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/eviop&amp;#34;&amp;gt;eviop&amp;lt;/a&amp;gt; ：evio 的优化版本&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/tidwall/evio&amp;#34;&amp;gt;evio&amp;lt;/a&amp;gt; ：Fast event-loop networking for Go&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/panjf2000/gnet&amp;#34;&amp;gt;gnet&amp;lt;/a&amp;gt; ：eviop 的网络模型替换版本&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;net 标准库&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;测试方法&amp;#34;&amp;gt;测试方法&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;采用陈硕测试 muduo 使用的 ping pong 协议来测试吞吐量。&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;简单地说，ping pong 协议是客户端和服务器都实现 echo 协议。当 TCP 连接建立时，客户端向服务器发送一些数据，服务器会 echo 回这些数据，然后客户端再 echo 回服务器。这些数据就会像乒乓球一样在客户端和服务器之间来回传送，直到有一方断开连接为止。这是用来测试吞吐量的常用办法。&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;测试的客户端代码： &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev/blob/master/benchmarks/client/main.go&amp;#34;&amp;gt;https://github.com/Allenxuxu/gev/blob/master/benchmarks/client/main.go&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;测试脚本：https://github.com/Allenxuxu/gev/blob/master/benchmarks/bench-pingpong.sh&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;主要做两项测试：&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;单线程单个 work 协程测试，测试并发连接数为 10/100/1000/10000 时的吞吐量&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;4线程4个 work 协程测试，测试并发连接数为 10/100/1000/10000 时的吞吐量&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;所有测试中，ping pong 消息的大小均为 4096 bytes，客户端始终是4线程运行。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;测试结果&amp;#34;&amp;gt;测试结果&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://cdn.jsdelivr.net/gh/Allenxuxu/blog/img/image-20210424120537758.png&amp;#34; alt=&amp;#34;image-20210424120537758&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://cdn.jsdelivr.net/gh/Allenxuxu/blog/img/image-20210424120550089.png&amp;#34; alt=&amp;#34;image-20210424120550089&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;总结与思考&amp;#34;&amp;gt;总结与思考&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;无论是单线程，还是多线程模式下，gev 都比其他网络库吞吐量略高出一些。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 因为 epoll 使用一些 bug 和可优化之处，所以在 linux 环境中的吞吐量远不如优化版本 eviop 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;eviop 是我对 evio bug 修复和优化的版本，所以其性能也是比 evio 提升不少。我曾尝试在 eviop 中替换 evio 的网络模型（evio 利用 accpet 的惊群现象工作），但是因为其代码耦合度过高，修改成本过大，最终决定一边完善 eviop（维持网络模型不变）一边自己借鉴muduo 的网络模型重新撸一个新的 &amp;amp;ndash; gev 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;gnet 是研究了 eviop 的代码，继续在其之上替换网络模型的版本。但是网络模型的优势在单线程模式中并没有体现出来，吞吐量反而比 eviop 小一些。在多线程模式下，网络模型的优势得以体现。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;gev 与其他使用 epoll 构建的基于事件驱动的网络库在逐步的优化中，相信性能都差不多。因为作者目的不同，网络库不同的设计，优势点都会不同。我研究 evio，最终自己撸了 gev ，也是因为想要一个在内存占用低前提下，速度足够快，能负载更多连接的网络库。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;如果对 gev 网络库感兴趣，欢迎提意见和 PR 。➡️ &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;https://github.com/Allenxuxu/gev&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description></item><item><title>开源 gev: Go 实现基于 Reactor 模式的非阻塞 TCP 网络库</title><link>https://blog.iofree.xyz/posts/open-source/gev/</link><pubDate>Thu, 19 Sep 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/open-source/gev/</guid><description>&amp;lt;h1 id=&amp;#34;gevhttpsgithubcomallenxuxugev----轻量快速的-golang-网络库&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt; 轻量、快速的 Golang 网络库&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt; 是一个轻量、快速的基于 Reactor 模式的非阻塞 TCP 网络库，支持自定义协议，轻松快速搭建高性能服务器。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;为什么有-gev&amp;#34;&amp;gt;为什么有 gev&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Golang 的 goroutine 虽然非常轻量，但是每启动一个 goroutine 仍需要 4k 左右的内存。读了鸟窝大佬的文章【&amp;lt;a href=&amp;#34;https://colobu.com/2019/02/23/1m-go-tcp-connection/&amp;#34;&amp;gt;百万 Go TCP 连接的思考: epoll方式减少资源占用&amp;lt;/a&amp;gt;】后，便去研究了了下 &amp;lt;a href=&amp;#34;https://github.com/tidwall/evio&amp;#34;&amp;gt;evio&amp;lt;/a&amp;gt;。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 虽然非常快，但是仍然存在一些问题，便尝试去优化它，于是有了 &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/eviop&amp;#34;&amp;gt;eviop&amp;lt;/a&amp;gt; 项目。关于 evio 的问题可以看我的另一篇博文 【&amp;lt;a href=&amp;#34;https://hacpai.com/article/1565926947655&amp;#34;&amp;gt;Golang 网络库evio一些问题/bug和思考&amp;lt;/a&amp;gt;】。在优化 evio 完成 eviop 的过程中，因为其网络模型的缘故，愈加感觉修改它非常麻烦，成本比重新搞一个还高。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;最终决定自己重搞一个，更加轻量，不需要的全去掉。加上大学时学习过 &amp;lt;a href=&amp;#34;https://github.com/chenshuo/muduo&amp;#34;&amp;gt;muduo&amp;lt;/a&amp;gt; ，便参考 muduo 的使用的 Reactor 模型实现 gev 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;在 linux 环境下，gev 底层使用 epoll ，这是 gev 会专注优化的地方。在 mac 下底层使用 kqueue，可能不会过多关注这部分的优化，毕竟很少有用 mac 做服务器的（Windows 环境&amp;amp;quot;暂&amp;amp;quot;不支持）。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;特点&amp;#34;&amp;gt;特点&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;基于 epoll 和 kqueue 实现的高性能事件循环&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;支持多核多线程&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;动态扩容 Ring Buffer 实现的读写缓冲区&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;异步读写&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;SO_REUSEPORT 端口重用支持&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;支持 WebSocket&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;支持定时任务，延时任务&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;支持自定义协议，处理 TCP 粘包&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;网络模型&amp;#34;&amp;gt;网络模型&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;gev&amp;lt;/code&amp;gt; 只使用极少的 goroutine, 一个 goroutine 负责监听客户端连接，其他 goroutine （work 协程）负责处理已连接客户端的读写事件，work 协程数量可以配置，默认与运行主机 CPU 数量相同。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://img.hacpai.com/file/2019/09/image-38c61bae.png&amp;#34; alt=&amp;#34;image.png&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;性能测试&amp;#34;&amp;gt;性能测试&amp;lt;/h2&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;测试环境 Ubuntu18.04&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;gnet&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;eviop&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;evio&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;net (标准库)&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h3 id=&amp;#34;吞吐量测试&amp;#34;&amp;gt;吞吐量测试&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://raw.githubusercontent.com/Allenxuxu/gev/master/benchmarks/out/gev11.png&amp;#34; alt=&amp;#34;null&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://raw.githubusercontent.com/Allenxuxu/gev/master/benchmarks/out/gev44.png&amp;#34; alt=&amp;#34;null&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;evio-压测方式&amp;#34;&amp;gt;evio 压测方式:&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;限制 GOMAXPROCS=1，1 个 work 协程&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://img.hacpai.com/file/2019/09/image-c3303366.png&amp;#34; alt=&amp;#34;image.png&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;限制 GOMAXPROCS=1，4 个 work 协程&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://img.hacpai.com/file/2019/09/image-6eb2e9a9.png&amp;#34; alt=&amp;#34;image.png&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;限制 GOMAXPROCS=4，4 个 work 协程&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://img.hacpai.com/file/2019/09/image-85dbdde8.png&amp;#34; alt=&amp;#34;image.png&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;</description></item><item><title>Golang 网络库 evio 一些问题/bug和思考</title><link>https://blog.iofree.xyz/posts/open-source/evio-code-bug/</link><pubDate>Thu, 15 Aug 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/open-source/evio-code-bug/</guid><description>&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Fast event-loop networking for Go&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;最近翻了 evio 的源码，发现一些问题，主要集中在 linux 平台 epoll 上和读写的处理。&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;用来唤醒 epoll 的 eventfd 写入数据没有读出&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;listen 的 fd 注册到所有事件循环，epoll 的惊群问题&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;loopWrite 在内核缓冲区满，无法一次写入时，出现写入数据丢失&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;eventfd-的使用问题&amp;#34;&amp;gt;eventfd 的使用问题&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;在 internal/internal_linux.go 中封装了 epoll 的使用 API 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Poll ...
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// epoll fd
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// wake fd
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;noteQueue&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;在 OpenPoll 时，会创建一个 eventfd 并将 fd 赋值给 Poll 的 wfd 成员， 并且注册到 epoll 监听可读事件。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当需要唤醒当前 epoll 时，提供了 Trigger 方法&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Trigger ...
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trigger&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Add&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Write&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt;, []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;})
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;这是往刚刚提到的 eventfd 中写入八字节数据，此时 epol l会被唤醒 epoll_wait 函数返回。 但是，evio 并没有去把 8 个字节的数据读取出来，内核缓冲区会不断积压，并且 evio 使用的是 epoll 的LT模式（默认模式），只要缓冲区中有数据，epoll 就会不断唤醒。这应该算是一个 bug 吧。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;listen-的-fd-注册到所有事件循环epoll-的惊群问题&amp;#34;&amp;gt;listen 的 fd 注册到所有事件循环，epoll 的惊群问题&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;evio 可以指定启动多个事件循环。evio 将 listen fd 注册到每一个事件循环中（epoll）监听可读事件，所以当一个连接到来时，所有的事件循环都会唤醒。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// create loops locally and bind the listeners.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;internal&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;OpenPoll&amp;lt;/span&amp;gt;(),
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;packet&amp;lt;/span&amp;gt;: make([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0xFFFF&amp;lt;/span&amp;gt;),
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt;: make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;),
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listeners&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;AddRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// start loops in background
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wg&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Add&amp;lt;/span&amp;gt;(len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;))
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopRun&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;这并不是一个 bug ，因为最终只有一个线程可以accept调用返回成功，其他线程（协程）的accept函数调用返回EAGAIN错误 ，作者也做出了处理。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nfd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sa&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Accept&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EAGAIN&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;并且作者还利用每个事件循环都会被唤醒，来做客户端连接的负载均衡策略。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;LeastConnections : 当存在其他事件循环的注册的客户端连接数比当前事件循环的连接数少的时候，直接 return nil 。当有两个最下连接数相同的时候，也没关系，因为 accept 会保证只有一个可以成功。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;RoundRobin： 原理也是一样，每个事件循环都会去判断 int(atomic.LoadUintptr(&amp;amp;amp;s.accepted)) % len(s.loops) ，轮到自己了，才继续执行，否则 return nil 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;balance&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LeastConnections&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LoadInt32&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lp&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lp&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LoadInt32&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lp&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;) &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do not accept
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RoundRobin&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LoadUintptr&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;accepted&amp;lt;/span&amp;gt;)) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;%&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do not accept
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;AddUintptr&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;accepted&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;这样的做法没有问题，但是个人觉得 muduo 的做法似乎更好。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;loopwrite-在内核缓冲区满无法一次写入时出现写入数据丢失&amp;#34;&amp;gt;loopWrite 在内核缓冲区满，无法一次写入时，出现写入数据丢失&amp;lt;/h2&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopWrite&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;PreWrite&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;PreWrite&amp;lt;/span&amp;gt;()
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Write&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EAGAIN&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopCloseConn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;:]
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;amp;amp;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ModRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;当内核缓冲区满时， syscall.Write(c.fd, c.out) 会无法全部写入，可以通过返回值得到已经写入的个数。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;:]
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;作者也做出了处理，判断了 返回值 n 不是 c.out 长度的情况，c.out = c.out[n:] 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;但是作者并没有去注册 epoll 可写事件啊。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;在当前文件搜索 ModReadWrite ，注册可读可写的事件，共有两处。一次是 loopWake 函数，一次是在 loopRead 函数。会不会作者在 loopRead 方法中了做了处理，规避了没有注册可写事件这种情况呢？&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;我们看下 loopRead&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Read&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;packet&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;||&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EAGAIN&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopCloseConn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;packet&amp;lt;/span&amp;gt;[:&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;]
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; !&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuse&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; = append([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Data&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = append([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;||&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ModReadWrite&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;果然，作者做了处理！ 当 s.events.Data(c, in) 函数返回，如果 c.out 有数据，就注册可读可写事件。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;所以，执行的流程是：&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;客户端有数据到来，loopRead 函数执行&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;调用客户注册的回调函数 events.Data 函数，客户将需要的写入给客户端的数据返回，evio 将需要写给客户端数据存到 c.out , 然后监听可读可写事件&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;eopll 可写事件唤醒，执行 loopWrite 直接 write 数据。 如果写完就重新注册，只注册可读事件；如果没写完，就不重新注册，还是可读可写事件都监听&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;当缓冲区有空间了时，epoll 又会唤醒继续 loopWrite 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;似乎没问题，但是仔细想一想，会不会有这种情况呢：&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;内核的缓冲区满了，第一次没写完，等待缓冲区可写。此时客户端又来了数据，继续执行 loopRead 。调用用户回调函数，又有要写入的数据。这是来看看处理逻辑&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Data&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = append([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;c.out = append([]byte{}, out&amp;amp;hellip;) 这里，之前没写完存在 c.out 里的数据直接被清空了啊。这样要写入的数据就丢失了一部分啊。&amp;lt;/p&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;h2 id=&amp;#34;思考&amp;#34;&amp;gt;思考&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;evio 速度非常快，但是翻了源码，发现 evio 并没有刻意去减少 epoll 的唤醒次数，相反 evio 利用 epoll 的多次唤醒去做操作。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;比如，调用客户回调后，并没有直接处理 action 的状态，反而是先把 action 存起来，增加注册 fd 的可写事件，让epoll 再唤醒，在 loopAction 中再来处理 action。先不说这样会不会有问题，这样让 epoll 频繁唤醒似乎不妥。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 的处理 read 和 write 的方式，也导致多次的内存拷贝，换种方式，性能还可以再次提升。evio 在 linux 环境（epoll）下，单元测试因为 &amp;lt;code&amp;gt;用来唤醒 epoll 的 eventfd 写入数据没有读出&amp;lt;/code&amp;gt; 这个bug ，单元测试并不能通过。在 ubuntu 环境下跑 evio 的压测，显示性能并没有 stdlib 好。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 非常轻量，这也说明它非常简单，使用起来还是非常不方便，并且对于 epoll 的处理还有很多可以优化的地方。而且，作者似乎很忙。。。 PR也不理，Issues 也不理。所以决定自己撸一个了，更好用，更快速：&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/eviop/&amp;#34;&amp;gt;eviop&amp;lt;/a&amp;gt; 。eviop 是想优化 evio ，但是由于 evio 的代码耦合性问题，举步维艰，所以干脆全部重写，撸了 &amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt;。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;推荐库&amp;#34;&amp;gt;推荐库&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt; 一个轻量、快速的基于 Reactor 模式的非阻塞 TCP 网络库。&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;</description></item><item><title>Golang 高性能网络库 evio 源码解析</title><link>https://blog.iofree.xyz/posts/open-source/evio-code/</link><pubDate>Tue, 06 Aug 2019 11:22:38 +0800</pubDate><guid>https://blog.iofree.xyz/posts/open-source/evio-code/</guid><description>&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;阅读前提：了解 epoll&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/tidwall/evio&amp;#34;&amp;gt;evio&amp;lt;/a&amp;gt; 是一个基于事件驱动的网络框架，它非常轻量而且相比 Go net 标准库更快。其底层使用epoll 和 kqueue 系统调度实现。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img loading=&amp;#34;lazy&amp;#34; src=&amp;#34;https://cdn.jsdelivr.net/gh/Allenxuxu/blog/img/echo.png&amp;#34; alt=&amp;#34;echo.png&amp;#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;h2 id=&amp;#34;原理&amp;#34;&amp;gt;原理&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;evio 是 Reactor 模式的简单实现。Reactor 本质就是“non-blocking IO + IO multiplexing”，通过非阻塞IO+ IO 多路复用来处理并发。程序运行一个或者多个事件循环，通过在事件循环中注册回调的方式实现业务逻辑。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 将所有文件描述符设为非阻塞，并注册到事件循环（ epoll / kqueue ）中。相较于传统的 per thread per connection 的处理方法，线程使用更少，线程资源利用率更高。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 需要在服务启动前，注册回调函数，当事件循环中有事件到来时，会调用回调函数处理。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;使用示例&amp;#34;&amp;gt;使用示例&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;先从一个简单的 echo server 的例子来了解 evio 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;package&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;flag&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;fmt&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;log&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;strings&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;github.com/tidwall/evio&amp;amp;#34;&amp;lt;/span&amp;gt;
)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;main&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;udp&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trace&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuseport&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;IntVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;port&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;5000&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;server port&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;BoolVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;udp&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;udp&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;listen on udp&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;BoolVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuseport&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;reuseport&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;reuseport (SO_REUSEPORT)&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;BoolVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trace&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;trace&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;print packets to console&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;IntVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;loops&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;num loops&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;BoolVar&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;stdlib&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;use stdlib&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;flag&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Parse&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;evio&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Events&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NumLoops&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serving&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;evio&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Server&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;evio&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Action&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Printf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;echo server started on port %d (loops: %d)&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;srv&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NumLoops&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuseport&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Printf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;reuseport&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Printf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;stdlib&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Data&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;evio&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Conn&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;evio&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Action&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;trace&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Printf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;%s&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;strings&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TrimSpace&amp;lt;/span&amp;gt;(string(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt;)))
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;scheme&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;tcp&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;udp&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;scheme&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;udp&amp;amp;#34;&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;scheme&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;-net&amp;amp;#34;&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;log&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Fatal&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;evio&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fmt&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sprintf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;%s://:%d?reuseport=%t&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;scheme&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;port&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuseport&amp;lt;/span&amp;gt;)))
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;上面的例子主要就是注册了两个回调函数： events.Serving 和 events.Data 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当 server 启动时，会来执行注册的 events.Serving 回调函数；
当有数据到来时，执行 events.Data 回调函数。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;程序最后调用 evio.Serve 方法开启事件循环，程序在此处不断循环检测是否有事件发生并处理（有数据到来，有数据要发送&amp;amp;hellip;)。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 都是通过回调函数来执行业务逻辑的。 当客户端有数据发送过来时，调用用户注册的 events.Data 函数。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;需要发送数据给客户端时，只可以通过注册的回调函数的返回值来返回，evio 框架来负责发送（有bug）。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;回调函数的返回值主要有两个 &amp;lt;code&amp;gt;out []byte, action evio.Action&amp;lt;/code&amp;gt; , out 就是需要发送给客户端的， Action 就是返回一些状态，用来关闭连接，或者服务器退出啥的操作。主要状态如下：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; (
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// None indicates that no action should occur following an event.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Action&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;iota&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Detach detaches a connection. Not available for UDP connections.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Detach&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Close closes the connection.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Close&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Shutdown shutdowns the server.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Shutdown&amp;lt;/span&amp;gt;
)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;evio-的事件循环&amp;#34;&amp;gt;evio 的事件循环&amp;lt;/h2&amp;gt;
&amp;lt;h3 id=&amp;#34;evioserve&amp;#34;&amp;gt;evio.Serve&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;我们先来看下 evio.Serve 方法的实现&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listener&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 这个函数如果推出，需要关闭所有 listener
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.close()
}
}()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 可以选择使用 stdlib（stdlib 主要是为了支持 非 *unix 平台）
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 生成 listener
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listener&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlibt&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;network&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlibt&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;parseAddr&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlibt&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;network&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;unix&amp;amp;#34;&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;os&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RemoveAll&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;network&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;udp&amp;amp;#34;&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reusePort&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pconn&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuseportListenPacket&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;network&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;)
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pconn&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ListenPacket&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;network&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;)
}
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reusePort&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuseportListen&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;network&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;)
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Listen&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;network&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pconn&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnaddr&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pconn&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LocalAddr&amp;lt;/span&amp;gt;()
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnaddr&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Addr&amp;lt;/span&amp;gt;()
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; !&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;system&amp;lt;/span&amp;gt;(); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdlib&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;stdserve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 使用 std net 库 启动server
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 使用 epoll or kqueue 启动server
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;从 Serve 函数签名中可以看出 evio 是支持绑定多地址监听的&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;使用方式如下：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;evio&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;tcp://localhost:5000&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;tcp://192.168.0.10:5001&amp;amp;#34;&amp;lt;/span&amp;gt;);
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;现在我们看看 evio 的核心部分: serve(events, lns)
，这里会启动 evio 的 sever 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listeners&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listener&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NumLoops&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 确定启动的事件循环数量
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;runtime&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NumCPU&amp;lt;/span&amp;gt;()
}
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;{}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listeners&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;cond&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sync&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NewCond&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sync&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Mutex&amp;lt;/span&amp;gt;{})
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;balance&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LoadBalance&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tch&amp;lt;/span&amp;gt; = make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;chan&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Duration&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//println(&amp;amp;#34;-- server starting&amp;amp;#34;)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serving&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 如果注册了回调函数，就执行
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;svr&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Server&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;svr&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;NumLoops&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;svr&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Addrs&amp;lt;/span&amp;gt; = make([]&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Addr&amp;lt;/span&amp;gt;, len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listeners&amp;lt;/span&amp;gt;))
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listeners&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;svr&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Addrs&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;] = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnaddr&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Serving&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;svr&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Shutdown&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;() { &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// server 退出后的清理工作
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// wait on a signal for shutdown
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;waitForShutdown&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// notify all loops to close by closing all listeners
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trigger&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errClosing&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// wait on all loops to complete reading events
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wg&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Wait&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// close loops and all outstanding connections
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopCloseConn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Close&amp;lt;/span&amp;gt;()
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//println(&amp;amp;#34;-- server stopped&amp;amp;#34;)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }()
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// create loops locally and bind the listeners.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;numLoops&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;{
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;internal&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;OpenPoll&amp;lt;/span&amp;gt;(),
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;packet&amp;lt;/span&amp;gt;: make([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0xFFFF&amp;lt;/span&amp;gt;), &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// event loop 的 read 缓冲区
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt;: make(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;),
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listeners&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;AddRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 将 fd 注册到 epoll 中并监听可读事件
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; = append(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// start loops in background
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wg&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Add&amp;lt;/span&amp;gt;(len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;))
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 启动所有的 event loop
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopRun&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;serve 主要做这些事：&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;根据配置启动指定数量的 event loop，如果传入配置的 loop 数量为 0 则设置启动一个事件循环，如果传入配置小于 0 则设置为运行平台的CPU核心数量&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;如果设置了回调函数 events.Serving ，运行它&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;按照指定 event loop 数量，创建 epoll 句柄生成 loop ，并将所有的 listener 注册到 epoll 监听可读事件（有客户端连接）&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;启动所有事件循环(一个事件循环一个 goroutine)&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;需要注意的是，evio 将所有的 listener 的 fd 在每一个事件循环的 epoll 中都注册了。也就是说，如果有三个事件循环，一个 listener ，那么这个 listener 的 fd 会注册到三个 epoll 中。这就会出现 epoll 的惊群现象，感兴趣的可以自己搜索了解下。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;evio 当一个新连接到来时，所有的事件循环都会唤醒，但是最终只有一个线程可以accept调用返回成功，其他线程（协程）的accept函数调用返回EAGAIN错误 。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;looprun&amp;#34;&amp;gt;loopRun&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;下面我们看看 loopRun 的内部实现&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopRun&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//fmt.Println(&amp;amp;#34;-- loop stopped --&amp;amp;#34;, l.idx)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;signalShutdown&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wg&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Done&amp;lt;/span&amp;gt;()
}()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;amp;amp;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Tick&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopTicker&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//fmt.Println(&amp;amp;#34;-- loop started --&amp;amp;#34;, l.idx)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Wait&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopNote&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;]
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAccept&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; !&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opened&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopOpened&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopWrite&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAction&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
}
})
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;l.poll.Wait 传入一个回调函数作为参数，当 epoll 收到事件通知时，会执行这个回调函数。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;在这个函数中接受客户端连接，读取客户端数据，调用客户回调函数处理业务逻辑&amp;amp;hellip;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;我们先来看下 poll.Wait 的内部实现，再看看 loopAccept，loopOpened，loopWrite 等函数。
loopRun 方法中最重要的就是 poll.Wait ，我们看看 Linux 下 epoll 的实现&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Wait&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; make([]&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EpollEvent&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;64&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EpollWait&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;amp;amp;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EINTR&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ForEach&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;)
}); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;].&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Fd&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
}
}
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;这个函数中是一个死循环，程序会阻塞在此处等待 epoll 的”通知“，然后处理就绪的 fd （读取/发送数据、执行用户注册的回调函数）。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当有 fd 就绪的时候，syscall.EpollWait 函数返回，并且将就绪的 fd 通过 events 传出，返回值 n 为就绪 fd 的个数。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;然后循环逐个遍历就绪的 fd，调用回调函数处理。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt; &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;++&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;].&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Fd&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
} &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;else&amp;lt;/span&amp;gt; {
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;evio-的事件处理&amp;#34;&amp;gt;evio 的事件处理&amp;lt;/h2&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Wait&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopNote&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;]
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAccept&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; !&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opened&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopOpened&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopWrite&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAction&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
}
})
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;当 epoll 检测到有就绪的 fd 时，会逐个调用上面的回调函数，evio 的主要逻辑也在这里。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当 fd == 0 时，会执行 loopNote 函数。loopNote 主要是用来处理一些非 fd 就绪的事件，比如定时任务、强制退出等。当然，我们都知道 fd 为 0 是标准输入，所以此处并不是真的去处理 fd 为 0 的文件描述符（注册到 epoll 的文件描述 &amp;amp;gt;= 3）。作者知道 epoll 返回的就绪 fd 中不会有为 0 的情况，所以此处 fd 为 0，是作者调用时传入，用来表示一种特殊的唤醒场景。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Wait&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;changes&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;changes&amp;lt;/span&amp;gt;[:&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;]
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ForEach&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;我们跳到调用它的地方，可以看到只有在 p.notes.ForEach 这个函数中注册的回调函数中才会传入 fd 为 0 来执行 iter 回调函数。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;notes noteQueue&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;noteQueue 的实现在 internal 目录中的 notequeue.go , 是一个无锁队列。我们不详细分析，只看下 ForEach 这个方法：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;noteQueue&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ForEach&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mu&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Lock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mu&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Unlock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;q&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;mu&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Unlock&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 执行回调函数
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;当队列中有数据时， 会执行回调函数，即&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;iter&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;从上面的分析中可以我们已经知道为什么会有 fd 为 0 ，下面我们看下 loopNote 做什么。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;loopnote&amp;#34;&amp;gt;loopNote&amp;lt;/h3&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopNote&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;.(&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Duration&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;delay&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Tick&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Shutdown&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errClosing&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;delay&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// shutdown
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Wake called for connection
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;] &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// ignore stale wakes
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopWake&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;v&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;传入的 note 是 interface{} ，首先对 note 进行类型判断。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当 note 是 time.Duration 时，调用回调函数 events.Tick() ，这是 evio 提供的定时任务接口。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;在 loopRun 函数中，如果设置了定时回调函数，会启动一个协程来来运行 loopTicker&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;amp;amp;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Tick&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;go&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopTicker&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;loopTicker 实现如下，可以看出会定时去触发 l.poll.Trigger，并且传入 time.Duration(0)&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopTicker&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trigger&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Duration&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;)); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;break&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Sleep&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;tch&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;我们跳到 poll.Trigger 的 linux 下的实现，可以发现 evio 在此处 p.notes.Add(note) ，也就是 time.Duration(0)&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trigger&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;interface&amp;lt;/span&amp;gt;{}) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Add&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;note&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Write&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt;, []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;})
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;poll.Trigger 这个函数不仅仅是在 p.notes 里增加了一个 note，还唤醒了事件循环。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当 epoll 中注册 fd 都没有就绪事件时，线程会挂起，epoll 的 wait 方法会处于阻塞状态。evio 使用
linux 提供的 eventfd 来实现事件循环的唤醒，也就是代码上中的 &amp;lt;code&amp;gt;syscall.Write(p.wfd, []byte{0, 0, 0, 0, 0, 0, 0, 1})&amp;lt;/code&amp;gt; ,往 p.wfd 这个文件描述符中写入了 8 个字节的数据。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;p.wfd 是一个 eventfd , 是 Poll 结构体的成员，在 OpenPoll 时赋值，即打开一个 eventfd 代码如下：&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// epoll fd
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// wake fd
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;notes&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;noteQueue&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;OpenPoll&amp;lt;/span&amp;gt;() &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; new(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EpollCreate1&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
panic(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;e0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Syscall&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SYS_EVENTFD2&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;e0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Close&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;p&amp;lt;/span&amp;gt;)
panic(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt; = int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;r0&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;AddRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wfd&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;syscall.Syscall(syscall.SYS_EVENTFD2, 0, 0, 0)&amp;lt;/code&amp;gt; 创建了一个 eventfd ，然后将这个 eventfd 注册到了 epoll 监听可读事件。当 &amp;lt;code&amp;gt;syscall.Write(p.wfd, []byte{0, 0, 0, 0, 0, 0, 0, 1})&amp;lt;/code&amp;gt; 时候，epoll 就会唤醒。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;但是，我翻了好久，也没有找到 evio 在哪里读取 eventfd 写入的8个字节（epoll）。这是一个 bug，所以在 linux 机器上，这是不能用的。&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;这个bug会造成 epoll 不断唤醒，cpu被长期占用&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;当我们注册了 evio 的定时任务 Tick 回调函数，程序启动后会往 eventfd 里写入 8 个字节数据，但是 evio 并没有读取，并且 evio 使用的是 epoll 的默认模式 LT，即只要可读缓冲区里还有数据，epoll 会一直不断唤醒，这是一个严重的 bug，作者应该没有在 linux 环境下严格测试过。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;我们抛开这个 bug， 继续来看 note 为 error 类型的情况。在 serve 函数中，当函数退出时，通过 &amp;lt;code&amp;gt;l.poll.Trigger(errClosing)&amp;lt;/code&amp;gt; 来通知每个事件循环退出。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;serve&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Events&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listeners&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;listener&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;defer&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// wait on a signal for shutdown
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;waitForShutdown&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// notify all loops to close by closing all listeners
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trigger&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errClosing&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// wait on all loops to complete reading events
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;wg&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Wait&amp;lt;/span&amp;gt;()
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// close loops and all outstanding connections
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopCloseConn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Close&amp;lt;/span&amp;gt;()
}
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;//println(&amp;amp;#34;-- server stopped&amp;amp;#34;)
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}()
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;当 note 为 *conn 这种情况，是用来提供给使用者主动唤醒当前事件循环&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; (&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Wake&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Trigger&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;loopaccept&amp;#34;&amp;gt;loopAccept&amp;lt;/h3&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;]
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAccept&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// loop index in the server loops list
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;internal&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Poll&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// epoll or kqueue
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;packet&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// read packet buffer
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;map&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;]&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// loop connections fd -&amp;amp;gt; conn
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int32&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// connection count
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;fdconns 是用来存储已连接的TCP connection 信息，key 为 fd， value 为 *conn 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;当 epoll 唤醒时，如果 fd 不在当前事件循环的连接，那就说明它是新连接，则执行 loopAccept 。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAccept&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;int&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;balance&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LeastConnections&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LoadInt32&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lp&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lp&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LoadInt32&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lp&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;) &amp;amp;lt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do not accept
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;RoundRobin&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;LoadUintptr&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;accepted&amp;lt;/span&amp;gt;)) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;%&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loops&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;idx&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// do not accept
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;AddUintptr&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;accepted&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;pconn&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopUDPRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nfd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sa&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Accept&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EAGAIN&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SetNonblock&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nfd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;{&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;nfd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sa&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sa&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnidx&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;i&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fdconns&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;] = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;AddReadWrite&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;atomic&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;AddInt32&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;count&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;break&amp;lt;/span&amp;gt;
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;因为 evio 支持多地址监听，所以会存在多个 listener ，也就是 s.lns 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;第一步，先遍历所有的 listener 看看当前 epoll 中就绪的 fd 是哪一个 listener ，然后执行客户端的负载策略，决定新的客户端连接放在哪一个事件循环中。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;这里关于客户端的负载策略，evio 利用了 epoll 的惊群效果，所有的事件循环都会唤醒进入loopAccept，不符合负载策略直接 return nil。 关于这边的更多细节，可以看我的另一篇文章 &amp;lt;a href=&amp;#34;/posts/open-source/evio-code-bug/&amp;#34;&amp;gt;【Golang 网络库 evio 一些问题/bug和思考】&amp;lt;/a&amp;gt;。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;接下来就是常规操作了，&amp;lt;code&amp;gt; syscall.Accept(fd)&amp;lt;/code&amp;gt; 接受连接，然后 &amp;lt;code&amp;gt; syscall.SetNonblock(nfd, true)&amp;lt;/code&amp;gt; 设置成非阻塞模式，&amp;lt;code&amp;gt; l.poll.AddReadWrite(c.fd)&amp;lt;/code&amp;gt; 最后加入事件循环，注册可读可写事件。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;loopopened&amp;#34;&amp;gt;loopOpened&amp;lt;/h3&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopOpened&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opened&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;addrIndex&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnidx&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;localAddr&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnidx&amp;lt;/span&amp;gt;].&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnaddr&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;remoteAddr&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;internal&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SockaddrToAddr&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;sa&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Opened&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Opened&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = append([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuse&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ReuseInputBuffer&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TCPKeepAlive&amp;lt;/span&amp;gt; &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;_&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lns&amp;lt;/span&amp;gt;[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;lnidx&amp;lt;/span&amp;gt;].&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ln&amp;lt;/span&amp;gt;.(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;net&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TCPListener&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ok&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;internal&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;SetKeepAlive&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;, int(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opts&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;TCPKeepAlive&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;time&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Second&amp;lt;/span&amp;gt;))
}
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;amp;amp;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ModRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;loopOpened 是在 loopAccept 执行完成后，epoll 会立马再次唤醒然后执行的。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;因为在 loopAccept 中最后将新的客户端连接加入 epoll 管理时注册的是可读可写事件，当前的内核写缓冲区肯定是为空的，所以 epoll 会再次唤醒。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; !&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;opened&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopOpened&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;唤醒后会执行到这个 case &amp;lt;code&amp;gt;case !c.opened:&amp;lt;/code&amp;gt;，因为在 loopAccept 中并没有去设置这个值。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;loopOpened 内部的操作，主要就是设置一下 conn 的属性，然后调用客户注册的回调函数 &amp;lt;code&amp;gt;events.Opened&amp;lt;/code&amp;gt; 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;如果在回调函数中，没有给客户端发送数据，则需要重新注册，只注册可读事件，不然 epoll 会一直唤醒（可写事件）。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;loopaction&amp;#34;&amp;gt;loopAction&amp;lt;/h3&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAction&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;default&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Close&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopCloseConn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Shutdown&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;errClosing&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Detach&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopDetachConn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;amp;amp;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ModRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt;:
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopAction&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;loopAction 会在 &amp;lt;code&amp;gt;case c.action != None:&amp;lt;/code&amp;gt; 的情况下执行， c.action 是执行完用户回调函数后会被赋值的状态。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;在会有 action 的 loopXXX 中都会有如下类似操作。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;||&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ModReadWrite&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;也就是说 loopAction 依赖于 epoll 被可写事件再次唤醒来执行，这样会不会有问题呢？ 内核缓冲区满了？？&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;loopAction 内部的主要操作就是根据 action 做一些处理，关闭连接等等。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;loopread-和--loopwrite&amp;#34;&amp;gt;loopRead 和 loopWrite&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;loopRead 和 loopWrite 主要就是调用系统调用读取和发送数据，并且调用用户回调函数，根据回调函数返回值来重新注册 epoll 的可读可写事件。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopRead&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;server&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loop&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;conn&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Read&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;packet&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;||&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;syscall&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;EAGAIN&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;loopCloseConn&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;err&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;packet&amp;lt;/span&amp;gt;[:&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;n&amp;lt;/span&amp;gt;]
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; !&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;reuse&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; = append([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Data&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;s&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;events&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;Data&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt; = append([]&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;byte&amp;lt;/span&amp;gt;{}, &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;...&amp;lt;/span&amp;gt;)
}
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; len(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;out&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;||&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;action&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;None&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;l&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;poll&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;ModReadWrite&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;c&amp;lt;/span&amp;gt;.&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;fd&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;调用 &amp;lt;code&amp;gt;n, err := syscall.Read(c.fd, l.packet)&amp;lt;/code&amp;gt; 读取内核缓冲区的数据，如果返回出错 &amp;lt;code&amp;gt;err == syscall.EAGAIN&amp;lt;/code&amp;gt; 意思是再试一次，直接返回。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;如果 n == 0 或者 err 错误不为 syscall.EAGAIN ，则说明对方关闭了连接或是其他错误，直接 loopCloseConn 。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;然后调用用户回调函数 s.events.Data ，根据返回值做相应操作。&amp;lt;code&amp;gt;c.action = action&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;如果 out 里有数据，则赋给 c.out , 并且注册可读可写事件。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;如果 &amp;lt;code&amp;gt;c.action != None&amp;lt;/code&amp;gt; ，同样需要注册可读可写事件，原因上面已经说过了。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;loopWrite 操作也大同小异，就不细说了。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;但是其实关于 loopWrite 和 loopRead 的处理是会有 bug 的，详情可以看另一篇文章。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;推荐库&amp;#34;&amp;gt;推荐库&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/Allenxuxu/gev&amp;#34;&amp;gt;gev&amp;lt;/a&amp;gt; 一个轻量、快速的基于 Reactor 模式的非阻塞 TCP 网络库。&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;</description></item></channel></rss>
This message is used to verify that this feed (feedId:73287159832503296) belongs to me (userId:62405606888475648). Join me in enjoying the next generation information browser https://follow.is.