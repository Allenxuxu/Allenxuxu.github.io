<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Practices on 徐旭 的博客</title><link>https://allenxuxu.github.io/practice/</link><description>Recent content in Practices on 徐旭 的博客</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 20 Apr 2021 11:22:38 +0800</lastBuildDate><atom:link href="https://allenxuxu.github.io/practice/index.xml" rel="self" type="application/rss+xml"/><item><title>Go1.16 embed 和 Vue</title><link>https://allenxuxu.github.io/practice/gin-vue/</link><pubDate>Tue, 20 Apr 2021 11:22:38 +0800</pubDate><guid>https://allenxuxu.github.io/practice/gin-vue/</guid><description>vue 相关代码： https://github.com/Allenxuxu/ginvue
先全局安装下 vue cli 并创建一个 demo 项目
npm install -g @vue/cli vue create web 然后我们进入 web 目录，修改生成的 package.json 文件调整一下 build 生成的静态文件目录。
&amp;ndash;dest 是指定输出的目录
**&amp;ndash;no-clean 是让他不要每次覆盖我们的目录，因为后面我们会放一个 go 文件到那个目录。 **
&amp;quot;build&amp;quot;: &amp;quot;vue-cli-service build --no-clean --dest ../static&amp;quot;, 再新增一个 vue.config.js 文件来修改下 , 这里将 production 的 publicPath 修改成带一个前缀 /ui/ , 这里主要就是为了后面我们的go 代码路由设置方便，所有的前端静态文件请求都带上 /ui 前缀，和后端 API 接口带 /api 前缀区分。
module.exports = { publicPath: process.env.NODE_ENV === 'production' ? '/ui/' : '/' } 最后我们再 web 目录运行 npm run build，会生成一个 static 目录（也就是我们修改的 package.</description></item><item><title>git 修改已经 commit 的邮箱信息</title><link>https://allenxuxu.github.io/practice/git-amend/</link><pubDate>Thu, 10 Sep 2020 11:22:38 +0800</pubDate><guid>https://allenxuxu.github.io/practice/git-amend/</guid><description>开发过程中，经常会出现提交邮箱搞错的情况。在公司项目中错误提交了自己的 GitHub 邮箱，或者在开源项目中提交了公司邮箱。
下面记录一下补救措施。
先修改 .git/config 或者 修改全局的，修改成你需要的邮箱信息。
[user] email = name@qq.com name = yourname git log 找到要修改的那一条 commit，复制要修改的commit 的前一条 commit 的哈希值。
git rebase -i {{刚刚复制的哈希值}}
然后后会出现一个 vim 打开的文本，将需要修改的 commit 信息前面的 pick 文本改成 edit，保存退出。
修改邮箱信息
git commit --amend --author=&amp;quot;name &amp;lt;name@qq.com&amp;gt;&amp;quot; --no-edit
这时候查看 git log 信息，发现邮箱已经更改了。
强制 push 到远程（注意风险）
git push -f origin HEAD:master
done！</description></item><item><title>golang protobuf 字段为零值时 json 序列化忽略问题</title><link>https://allenxuxu.github.io/practice/protobuf-json/</link><pubDate>Tue, 02 Jun 2020 11:22:38 +0800</pubDate><guid>https://allenxuxu.github.io/practice/protobuf-json/</guid><description>protoc 编译生成的 pb.go 文件，默认情况下 tag 中会设置 json 忽略零值的返回属性 omitempty。
type Message struct { Header map[string]string `protobuf:&amp;#34;bytes,1,rep,name=header,proto3&amp;#34; json:&amp;#34;header,omitempty&amp;#34; protobuf_key:&amp;#34;bytes,1,opt,name=key,proto3&amp;#34; protobuf_val:&amp;#34;bytes,2,opt,name=value,proto3&amp;#34;` Body []byte `protobuf:&amp;#34;bytes,2,opt,name=body,proto3&amp;#34; json:&amp;#34;body,omitempty&amp;#34;` XXX_NoUnkeyedLiteral struct{} `json:&amp;#34;-&amp;#34;` XXX_unrecognized []byte `json:&amp;#34;-&amp;#34;` XXX_sizecache int32 `json:&amp;#34;-&amp;#34;` } 一个比较 hack 的方式，是在 pb.go 文件生成后，手动去删掉 omitempty 。每次手动去删除，比较麻烦且容易出错，下面提供一个 Makefile ，每次生成 pb.go 的时候就去删除 omitempty 。
proto: protoc --proto_path=. --go_out=. --micro_out=. config/config.proto ls config/*.pb.go | xargs -n1 -IX bash -c &amp;#39;sed s/,omitempty// X &amp;gt; X.tmp &amp;amp;&amp;amp; mv X{.tmp,}&amp;#39; proto 目标的第一个命令是调用 protoc 根据 config/config.</description></item><item><title>Github Actions 配置 CI/CD 自动发布 docker 镜像</title><link>https://allenxuxu.github.io/practice/github-action-docker/</link><pubDate>Thu, 02 Apr 2020 11:22:38 +0800</pubDate><guid>https://allenxuxu.github.io/practice/github-action-docker/</guid><description>Github Actions 是 Github 内置的 CI/CD 工具，现在已经对所有的开源项目免费开放了。
本文主要记录使用 Github Actions 实践 CI/CD 的一些配置。
功能目标 代码静态检查 代码单元测试 release/tag 时自动 build 镜像并推送到 docker hub 项目 Dockerfile 和 Makefile 项目主要目录
. ├── LICENSE ├── Makefile ├── README.md ├── config-srv │ ├── Makefile │ └── main.go ├── deployments │ ├── docker │ │ ├── config-srv │ │ │ └── Dockerfile ├── go.mod ├── go.sum config-srv 目录：服务代码 deployments 目录：所有服务的 Dockerfile Makefile 顶层 Makefile：build Docker 镜像 我们先看下顶层的 Makefile</description></item></channel></rss>